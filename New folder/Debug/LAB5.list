
LAB5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003638  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009dc  080037d8  080037d8  000137d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041b4  080041b4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080041b4  080041b4  000141b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041bc  080041bc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041bc  080041bc  000141bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041c0  080041c0  000141c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080041c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000074  08004238  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08004238  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d25  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000171b  00000000  00000000  00028dc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  0002a4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000658  00000000  00000000  0002abc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015913  00000000  00000000  0002b220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008c7e  00000000  00000000  00040b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085d2d  00000000  00000000  000497b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf4de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001edc  00000000  00000000  000cf530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080037c0 	.word	0x080037c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080037c0 	.word	0x080037c0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fc38 	bl	8000e0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f84a 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f8dc 	bl	800075c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a4:	f000 f8b0 	bl	8000708 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  UARTInterruptConfig();
 80005a8:	f000 f94e 	bl	8000848 <UARTInterruptConfig>
  sprintf((char*)UI,"\r\n------------- Welcome to main menu ------------\r\n\n"
 80005ac:	491a      	ldr	r1, [pc, #104]	; (8000618 <main+0x84>)
 80005ae:	481b      	ldr	r0, [pc, #108]	; (800061c <main+0x88>)
 80005b0:	f002 fc98 	bl	8002ee4 <siprintf>
		  "**Please enter information to select a function.**\r\n"
		  "Select 0 To LED Control\r\n"
		  "Select 1 To Button Status\r\n"
		  "==============================================\r\n"
		  "Enter you select this one : \r\n");
  HAL_UART_Transmit_IT(&huart2, UI, strlen((char*)UI));
 80005b4:	4819      	ldr	r0, [pc, #100]	; (800061c <main+0x88>)
 80005b6:	f7ff fe13 	bl	80001e0 <strlen>
 80005ba:	4603      	mov	r3, r0
 80005bc:	b29b      	uxth	r3, r3
 80005be:	461a      	mov	r2, r3
 80005c0:	4916      	ldr	r1, [pc, #88]	; (800061c <main+0x88>)
 80005c2:	4817      	ldr	r0, [pc, #92]	; (8000620 <main+0x8c>)
 80005c4:	f001 fced 	bl	8001fa2 <HAL_UART_Transmit_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  static uint32_t timestamp =0;
	  if(HAL_GetTick()>timestamp &&LED_On==1){
 80005c8:	f000 fc86 	bl	8000ed8 <HAL_GetTick>
 80005cc:	4602      	mov	r2, r0
 80005ce:	4b15      	ldr	r3, [pc, #84]	; (8000624 <main+0x90>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	429a      	cmp	r2, r3
 80005d4:	d915      	bls.n	8000602 <main+0x6e>
 80005d6:	4b14      	ldr	r3, [pc, #80]	; (8000628 <main+0x94>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d111      	bne.n	8000602 <main+0x6e>
		  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 80005de:	2120      	movs	r1, #32
 80005e0:	4812      	ldr	r0, [pc, #72]	; (800062c <main+0x98>)
 80005e2:	f000 ffc6 	bl	8001572 <HAL_GPIO_TogglePin>
		  timestamp = HAL_GetTick()+500/Hz; //500ms=1Hz
 80005e6:	f000 fc77 	bl	8000ed8 <HAL_GetTick>
 80005ea:	4603      	mov	r3, r0
 80005ec:	4a10      	ldr	r2, [pc, #64]	; (8000630 <main+0x9c>)
 80005ee:	7812      	ldrb	r2, [r2, #0]
 80005f0:	4611      	mov	r1, r2
 80005f2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005f6:	fb92 f2f1 	sdiv	r2, r2, r1
 80005fa:	4413      	add	r3, r2
 80005fc:	4a09      	ldr	r2, [pc, #36]	; (8000624 <main+0x90>)
 80005fe:	6013      	str	r3, [r2, #0]
 8000600:	e008      	b.n	8000614 <main+0x80>
	  }
	  else if (LED_On==0){
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <main+0x94>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d1de      	bne.n	80005c8 <main+0x34>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	2120      	movs	r1, #32
 800060e:	4807      	ldr	r0, [pc, #28]	; (800062c <main+0x98>)
 8000610:	f000 ff96 	bl	8001540 <HAL_GPIO_WritePin>
  {
 8000614:	e7d8      	b.n	80005c8 <main+0x34>
 8000616:	bf00      	nop
 8000618:	080037d8 	.word	0x080037d8
 800061c:	20000110 	.word	0x20000110
 8000620:	20000090 	.word	0x20000090
 8000624:	20000308 	.word	0x20000308
 8000628:	20000000 	.word	0x20000000
 800062c:	40020000 	.word	0x40020000
 8000630:	20000001 	.word	0x20000001

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	; 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	2230      	movs	r2, #48	; 0x30
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f002 fc46 	bl	8002ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	4b28      	ldr	r3, [pc, #160]	; (8000700 <SystemClock_Config+0xcc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	4a27      	ldr	r2, [pc, #156]	; (8000700 <SystemClock_Config+0xcc>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	; 0x40
 8000668:	4b25      	ldr	r3, [pc, #148]	; (8000700 <SystemClock_Config+0xcc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b22      	ldr	r3, [pc, #136]	; (8000704 <SystemClock_Config+0xd0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a21      	ldr	r2, [pc, #132]	; (8000704 <SystemClock_Config+0xd0>)
 800067e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <SystemClock_Config+0xd0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000690:	2302      	movs	r3, #2
 8000692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000694:	2301      	movs	r3, #1
 8000696:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000698:	2310      	movs	r3, #16
 800069a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069c:	2302      	movs	r3, #2
 800069e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a0:	2300      	movs	r3, #0
 80006a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006a4:	2310      	movs	r3, #16
 80006a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ae:	2304      	movs	r3, #4
 80006b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b2:	2304      	movs	r3, #4
 80006b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b6:	f107 0320 	add.w	r3, r7, #32
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 ff8c 	bl	80015d8 <HAL_RCC_OscConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006c6:	f000 fa75 	bl	8000bb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ca:	230f      	movs	r3, #15
 80006cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ce:	2302      	movs	r3, #2
 80006d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2102      	movs	r1, #2
 80006e6:	4618      	mov	r0, r3
 80006e8:	f001 f9ee 	bl	8001ac8 <HAL_RCC_ClockConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006f2:	f000 fa5f 	bl	8000bb4 <Error_Handler>
  }
}
 80006f6:	bf00      	nop
 80006f8:	3750      	adds	r7, #80	; 0x50
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 800070e:	4a12      	ldr	r2, [pc, #72]	; (8000758 <MX_USART2_UART_Init+0x50>)
 8000710:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000712:	4b10      	ldr	r3, [pc, #64]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 8000714:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000718:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 800072e:	220c      	movs	r2, #12
 8000730:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 8000740:	f001 fbe2 	bl	8001f08 <HAL_UART_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800074a:	f000 fa33 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000090 	.word	0x20000090
 8000758:	40004400 	.word	0x40004400

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	; 0x28
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b31      	ldr	r3, [pc, #196]	; (800083c <MX_GPIO_Init+0xe0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a30      	ldr	r2, [pc, #192]	; (800083c <MX_GPIO_Init+0xe0>)
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b2e      	ldr	r3, [pc, #184]	; (800083c <MX_GPIO_Init+0xe0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b2a      	ldr	r3, [pc, #168]	; (800083c <MX_GPIO_Init+0xe0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a29      	ldr	r2, [pc, #164]	; (800083c <MX_GPIO_Init+0xe0>)
 8000798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b27      	ldr	r3, [pc, #156]	; (800083c <MX_GPIO_Init+0xe0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b23      	ldr	r3, [pc, #140]	; (800083c <MX_GPIO_Init+0xe0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a22      	ldr	r2, [pc, #136]	; (800083c <MX_GPIO_Init+0xe0>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b20      	ldr	r3, [pc, #128]	; (800083c <MX_GPIO_Init+0xe0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b1c      	ldr	r3, [pc, #112]	; (800083c <MX_GPIO_Init+0xe0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a1b      	ldr	r2, [pc, #108]	; (800083c <MX_GPIO_Init+0xe0>)
 80007d0:	f043 0302 	orr.w	r3, r3, #2
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b19      	ldr	r3, [pc, #100]	; (800083c <MX_GPIO_Init+0xe0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0302 	and.w	r3, r3, #2
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2120      	movs	r1, #32
 80007e6:	4816      	ldr	r0, [pc, #88]	; (8000840 <MX_GPIO_Init+0xe4>)
 80007e8:	f000 feaa 	bl	8001540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80007f2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4619      	mov	r1, r3
 8000802:	4810      	ldr	r0, [pc, #64]	; (8000844 <MX_GPIO_Init+0xe8>)
 8000804:	f000 fd18 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000808:	2320      	movs	r3, #32
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	2301      	movs	r3, #1
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4619      	mov	r1, r3
 800081e:	4808      	ldr	r0, [pc, #32]	; (8000840 <MX_GPIO_Init+0xe4>)
 8000820:	f000 fd0a 	bl	8001238 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000824:	2200      	movs	r2, #0
 8000826:	2100      	movs	r1, #0
 8000828:	2028      	movs	r0, #40	; 0x28
 800082a:	f000 fc3c 	bl	80010a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800082e:	2028      	movs	r0, #40	; 0x28
 8000830:	f000 fc55 	bl	80010de <HAL_NVIC_EnableIRQ>

}
 8000834:	bf00      	nop
 8000836:	3728      	adds	r7, #40	; 0x28
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40023800 	.word	0x40023800
 8000840:	40020000 	.word	0x40020000
 8000844:	40020800 	.word	0x40020800

08000848 <UARTInterruptConfig>:

/* USER CODE BEGIN 4 */
void UARTInterruptConfig(){
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
 800084c:	2201      	movs	r2, #1
 800084e:	4903      	ldr	r1, [pc, #12]	; (800085c <UARTInterruptConfig+0x14>)
 8000850:	4803      	ldr	r0, [pc, #12]	; (8000860 <UARTInterruptConfig+0x18>)
 8000852:	f001 fbeb 	bl	800202c <HAL_UART_Receive_IT>
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200000d4 	.word	0x200000d4
 8000860:	20000090 	.word	0x20000090

08000864 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a93      	ldr	r2, [pc, #588]	; (8000abc <HAL_UART_RxCpltCallback+0x258>)
 8000870:	4293      	cmp	r3, r2
 8000872:	f040 811e 	bne.w	8000ab2 <HAL_UART_RxCpltCallback+0x24e>
		OK = 1;
 8000876:	4b92      	ldr	r3, [pc, #584]	; (8000ac0 <HAL_UART_RxCpltCallback+0x25c>)
 8000878:	2201      	movs	r2, #1
 800087a:	701a      	strb	r2, [r3, #0]
		if(CheckLedMenu==0 && OK == 1){
 800087c:	4b91      	ldr	r3, [pc, #580]	; (8000ac4 <HAL_UART_RxCpltCallback+0x260>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d146      	bne.n	8000912 <HAL_UART_RxCpltCallback+0xae>
 8000884:	4b8e      	ldr	r3, [pc, #568]	; (8000ac0 <HAL_UART_RxCpltCallback+0x25c>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d142      	bne.n	8000912 <HAL_UART_RxCpltCallback+0xae>
		if(RxBuffer[0] == '0'){
 800088c:	4b8e      	ldr	r3, [pc, #568]	; (8000ac8 <HAL_UART_RxCpltCallback+0x264>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b30      	cmp	r3, #48	; 0x30
 8000892:	d115      	bne.n	80008c0 <HAL_UART_RxCpltCallback+0x5c>
			sprintf((char*)TxBuffer,"%s\r\n----------- Welcome to LED Control -----------\r\n\n" //mode led
 8000894:	4a8c      	ldr	r2, [pc, #560]	; (8000ac8 <HAL_UART_RxCpltCallback+0x264>)
 8000896:	498d      	ldr	r1, [pc, #564]	; (8000acc <HAL_UART_RxCpltCallback+0x268>)
 8000898:	488d      	ldr	r0, [pc, #564]	; (8000ad0 <HAL_UART_RxCpltCallback+0x26c>)
 800089a:	f002 fb23 	bl	8002ee4 <siprintf>
					"Select s To Speed Down -1Hz\r\n"
					"Select d To On/OFF\r\n"
					"Select x To Back to main menu\r\n"
					"==================================================\r\n"
					"Enter you select this one : ",RxBuffer);
			HAL_UART_Transmit_IT(&huart2, TxBuffer, strlen((char*)TxBuffer));
 800089e:	488c      	ldr	r0, [pc, #560]	; (8000ad0 <HAL_UART_RxCpltCallback+0x26c>)
 80008a0:	f7ff fc9e 	bl	80001e0 <strlen>
 80008a4:	4603      	mov	r3, r0
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	461a      	mov	r2, r3
 80008aa:	4989      	ldr	r1, [pc, #548]	; (8000ad0 <HAL_UART_RxCpltCallback+0x26c>)
 80008ac:	4883      	ldr	r0, [pc, #524]	; (8000abc <HAL_UART_RxCpltCallback+0x258>)
 80008ae:	f001 fb78 	bl	8001fa2 <HAL_UART_Transmit_IT>
			CheckLedMenu=1;
 80008b2:	4b84      	ldr	r3, [pc, #528]	; (8000ac4 <HAL_UART_RxCpltCallback+0x260>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	701a      	strb	r2, [r3, #0]
			OK = 0;
 80008b8:	4b81      	ldr	r3, [pc, #516]	; (8000ac0 <HAL_UART_RxCpltCallback+0x25c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	701a      	strb	r2, [r3, #0]
 80008be:	e028      	b.n	8000912 <HAL_UART_RxCpltCallback+0xae>
		}
		else if(RxBuffer[0]=='1'){
 80008c0:	4b81      	ldr	r3, [pc, #516]	; (8000ac8 <HAL_UART_RxCpltCallback+0x264>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b31      	cmp	r3, #49	; 0x31
 80008c6:	d115      	bne.n	80008f4 <HAL_UART_RxCpltCallback+0x90>
					sprintf((char*)TxBuffer,"%s\r\n---------- Welcome to Button Status -----------\r\n\n" //mode button
 80008c8:	4a7f      	ldr	r2, [pc, #508]	; (8000ac8 <HAL_UART_RxCpltCallback+0x264>)
 80008ca:	4982      	ldr	r1, [pc, #520]	; (8000ad4 <HAL_UART_RxCpltCallback+0x270>)
 80008cc:	4880      	ldr	r0, [pc, #512]	; (8000ad0 <HAL_UART_RxCpltCallback+0x26c>)
 80008ce:	f002 fb09 	bl	8002ee4 <siprintf>
										"**Please enter information to select a function.**\r\n"
										"Select x To Back to main menu\r\n"
										"Button Status is UNPRESS\r\n"
										"================================================\r\n"
										"Enter you select this one : \r\n\n",RxBuffer);
								HAL_UART_Transmit_IT(&huart2, TxBuffer, strlen((char*)TxBuffer));
 80008d2:	487f      	ldr	r0, [pc, #508]	; (8000ad0 <HAL_UART_RxCpltCallback+0x26c>)
 80008d4:	f7ff fc84 	bl	80001e0 <strlen>
 80008d8:	4603      	mov	r3, r0
 80008da:	b29b      	uxth	r3, r3
 80008dc:	461a      	mov	r2, r3
 80008de:	497c      	ldr	r1, [pc, #496]	; (8000ad0 <HAL_UART_RxCpltCallback+0x26c>)
 80008e0:	4876      	ldr	r0, [pc, #472]	; (8000abc <HAL_UART_RxCpltCallback+0x258>)
 80008e2:	f001 fb5e 	bl	8001fa2 <HAL_UART_Transmit_IT>
								CheckLedMenu=2;
 80008e6:	4b77      	ldr	r3, [pc, #476]	; (8000ac4 <HAL_UART_RxCpltCallback+0x260>)
 80008e8:	2202      	movs	r2, #2
 80008ea:	701a      	strb	r2, [r3, #0]
								OK=0;
 80008ec:	4b74      	ldr	r3, [pc, #464]	; (8000ac0 <HAL_UART_RxCpltCallback+0x25c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]
 80008f2:	e00e      	b.n	8000912 <HAL_UART_RxCpltCallback+0xae>
				}
		else{
			sprintf((char*)UI,"%s\r\n**Please select to choice**\r\n" //check choice to select incorrect
 80008f4:	4a74      	ldr	r2, [pc, #464]	; (8000ac8 <HAL_UART_RxCpltCallback+0x264>)
 80008f6:	4978      	ldr	r1, [pc, #480]	; (8000ad8 <HAL_UART_RxCpltCallback+0x274>)
 80008f8:	4878      	ldr	r0, [pc, #480]	; (8000adc <HAL_UART_RxCpltCallback+0x278>)
 80008fa:	f002 faf3 	bl	8002ee4 <siprintf>
				  "Select 0 To LED Control\r\n"
				  "Select 1 To Button Status\r\n"
				  "=================================================\r\n"
				  "Enter you select this one : \r\n",RxBuffer);
			HAL_UART_Transmit_IT(&huart2, UI, strlen((char*)UI));
 80008fe:	4877      	ldr	r0, [pc, #476]	; (8000adc <HAL_UART_RxCpltCallback+0x278>)
 8000900:	f7ff fc6e 	bl	80001e0 <strlen>
 8000904:	4603      	mov	r3, r0
 8000906:	b29b      	uxth	r3, r3
 8000908:	461a      	mov	r2, r3
 800090a:	4974      	ldr	r1, [pc, #464]	; (8000adc <HAL_UART_RxCpltCallback+0x278>)
 800090c:	486b      	ldr	r0, [pc, #428]	; (8000abc <HAL_UART_RxCpltCallback+0x258>)
 800090e:	f001 fb48 	bl	8001fa2 <HAL_UART_Transmit_IT>
			}
		}
		if(CheckLedMenu == 1 && OK == 1){ //check choice menu led
 8000912:	4b6c      	ldr	r3, [pc, #432]	; (8000ac4 <HAL_UART_RxCpltCallback+0x260>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b01      	cmp	r3, #1
 8000918:	f040 8095 	bne.w	8000a46 <HAL_UART_RxCpltCallback+0x1e2>
 800091c:	4b68      	ldr	r3, [pc, #416]	; (8000ac0 <HAL_UART_RxCpltCallback+0x25c>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b01      	cmp	r3, #1
 8000922:	f040 8090 	bne.w	8000a46 <HAL_UART_RxCpltCallback+0x1e2>

			if(RxBuffer[0] == 'a'){
 8000926:	4b68      	ldr	r3, [pc, #416]	; (8000ac8 <HAL_UART_RxCpltCallback+0x264>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b61      	cmp	r3, #97	; 0x61
 800092c:	d117      	bne.n	800095e <HAL_UART_RxCpltCallback+0xfa>
				Hz=Hz+1;
 800092e:	4b6c      	ldr	r3, [pc, #432]	; (8000ae0 <HAL_UART_RxCpltCallback+0x27c>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	3301      	adds	r3, #1
 8000934:	b2da      	uxtb	r2, r3
 8000936:	4b6a      	ldr	r3, [pc, #424]	; (8000ae0 <HAL_UART_RxCpltCallback+0x27c>)
 8000938:	701a      	strb	r2, [r3, #0]
				sprintf((char*)TxBuffer,"%s\r\nLED Current is %d\r\n"
 800093a:	4b69      	ldr	r3, [pc, #420]	; (8000ae0 <HAL_UART_RxCpltCallback+0x27c>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	4a62      	ldr	r2, [pc, #392]	; (8000ac8 <HAL_UART_RxCpltCallback+0x264>)
 8000940:	4968      	ldr	r1, [pc, #416]	; (8000ae4 <HAL_UART_RxCpltCallback+0x280>)
 8000942:	4863      	ldr	r0, [pc, #396]	; (8000ad0 <HAL_UART_RxCpltCallback+0x26c>)
 8000944:	f002 face 	bl	8002ee4 <siprintf>
						"Enter you select this one : "
						,RxBuffer,Hz);
				HAL_UART_Transmit_IT(&huart2, TxBuffer, strlen((char*)TxBuffer));
 8000948:	4861      	ldr	r0, [pc, #388]	; (8000ad0 <HAL_UART_RxCpltCallback+0x26c>)
 800094a:	f7ff fc49 	bl	80001e0 <strlen>
 800094e:	4603      	mov	r3, r0
 8000950:	b29b      	uxth	r3, r3
 8000952:	461a      	mov	r2, r3
 8000954:	495e      	ldr	r1, [pc, #376]	; (8000ad0 <HAL_UART_RxCpltCallback+0x26c>)
 8000956:	4859      	ldr	r0, [pc, #356]	; (8000abc <HAL_UART_RxCpltCallback+0x258>)
 8000958:	f001 fb23 	bl	8001fa2 <HAL_UART_Transmit_IT>
 800095c:	e073      	b.n	8000a46 <HAL_UART_RxCpltCallback+0x1e2>
			}
			else if(RxBuffer[0] == 's'){
 800095e:	4b5a      	ldr	r3, [pc, #360]	; (8000ac8 <HAL_UART_RxCpltCallback+0x264>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b73      	cmp	r3, #115	; 0x73
 8000964:	d117      	bne.n	8000996 <HAL_UART_RxCpltCallback+0x132>
				Hz=Hz-1;
 8000966:	4b5e      	ldr	r3, [pc, #376]	; (8000ae0 <HAL_UART_RxCpltCallback+0x27c>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	3b01      	subs	r3, #1
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4b5c      	ldr	r3, [pc, #368]	; (8000ae0 <HAL_UART_RxCpltCallback+0x27c>)
 8000970:	701a      	strb	r2, [r3, #0]
				sprintf((char*)TxBuffer,"%s\r\nLED Current is %d\r\n"
 8000972:	4b5b      	ldr	r3, [pc, #364]	; (8000ae0 <HAL_UART_RxCpltCallback+0x27c>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	4a54      	ldr	r2, [pc, #336]	; (8000ac8 <HAL_UART_RxCpltCallback+0x264>)
 8000978:	495a      	ldr	r1, [pc, #360]	; (8000ae4 <HAL_UART_RxCpltCallback+0x280>)
 800097a:	4855      	ldr	r0, [pc, #340]	; (8000ad0 <HAL_UART_RxCpltCallback+0x26c>)
 800097c:	f002 fab2 	bl	8002ee4 <siprintf>
						"Enter you select this one : "
						,RxBuffer,Hz);
				HAL_UART_Transmit_IT(&huart2, TxBuffer, strlen((char*)TxBuffer));
 8000980:	4853      	ldr	r0, [pc, #332]	; (8000ad0 <HAL_UART_RxCpltCallback+0x26c>)
 8000982:	f7ff fc2d 	bl	80001e0 <strlen>
 8000986:	4603      	mov	r3, r0
 8000988:	b29b      	uxth	r3, r3
 800098a:	461a      	mov	r2, r3
 800098c:	4950      	ldr	r1, [pc, #320]	; (8000ad0 <HAL_UART_RxCpltCallback+0x26c>)
 800098e:	484b      	ldr	r0, [pc, #300]	; (8000abc <HAL_UART_RxCpltCallback+0x258>)
 8000990:	f001 fb07 	bl	8001fa2 <HAL_UART_Transmit_IT>
 8000994:	e057      	b.n	8000a46 <HAL_UART_RxCpltCallback+0x1e2>
			}
			else if(RxBuffer[0] == 'd'){
 8000996:	4b4c      	ldr	r3, [pc, #304]	; (8000ac8 <HAL_UART_RxCpltCallback+0x264>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b64      	cmp	r3, #100	; 0x64
 800099c:	d12d      	bne.n	80009fa <HAL_UART_RxCpltCallback+0x196>
				if(LED_On==0){
 800099e:	4b52      	ldr	r3, [pc, #328]	; (8000ae8 <HAL_UART_RxCpltCallback+0x284>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d112      	bne.n	80009cc <HAL_UART_RxCpltCallback+0x168>
					LED_On=1;
 80009a6:	4b50      	ldr	r3, [pc, #320]	; (8000ae8 <HAL_UART_RxCpltCallback+0x284>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	701a      	strb	r2, [r3, #0]
					sprintf((char*)TxBuffer,"%s\r\nLED ON\r\n"
 80009ac:	4a46      	ldr	r2, [pc, #280]	; (8000ac8 <HAL_UART_RxCpltCallback+0x264>)
 80009ae:	494f      	ldr	r1, [pc, #316]	; (8000aec <HAL_UART_RxCpltCallback+0x288>)
 80009b0:	4847      	ldr	r0, [pc, #284]	; (8000ad0 <HAL_UART_RxCpltCallback+0x26c>)
 80009b2:	f002 fa97 	bl	8002ee4 <siprintf>
							"Enter you select this one : ",RxBuffer);
					HAL_UART_Transmit_IT(&huart2, TxBuffer, strlen((char*)TxBuffer));
 80009b6:	4846      	ldr	r0, [pc, #280]	; (8000ad0 <HAL_UART_RxCpltCallback+0x26c>)
 80009b8:	f7ff fc12 	bl	80001e0 <strlen>
 80009bc:	4603      	mov	r3, r0
 80009be:	b29b      	uxth	r3, r3
 80009c0:	461a      	mov	r2, r3
 80009c2:	4943      	ldr	r1, [pc, #268]	; (8000ad0 <HAL_UART_RxCpltCallback+0x26c>)
 80009c4:	483d      	ldr	r0, [pc, #244]	; (8000abc <HAL_UART_RxCpltCallback+0x258>)
 80009c6:	f001 faec 	bl	8001fa2 <HAL_UART_Transmit_IT>
 80009ca:	e03c      	b.n	8000a46 <HAL_UART_RxCpltCallback+0x1e2>
				}
				else if(LED_On==1){
 80009cc:	4b46      	ldr	r3, [pc, #280]	; (8000ae8 <HAL_UART_RxCpltCallback+0x284>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d138      	bne.n	8000a46 <HAL_UART_RxCpltCallback+0x1e2>
					LED_On=0;
 80009d4:	4b44      	ldr	r3, [pc, #272]	; (8000ae8 <HAL_UART_RxCpltCallback+0x284>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]
					sprintf((char*)TxBuffer,"%s\r\nLED OFF\r\n"
 80009da:	4a3b      	ldr	r2, [pc, #236]	; (8000ac8 <HAL_UART_RxCpltCallback+0x264>)
 80009dc:	4944      	ldr	r1, [pc, #272]	; (8000af0 <HAL_UART_RxCpltCallback+0x28c>)
 80009de:	483c      	ldr	r0, [pc, #240]	; (8000ad0 <HAL_UART_RxCpltCallback+0x26c>)
 80009e0:	f002 fa80 	bl	8002ee4 <siprintf>
							"Enter you select this one : ",RxBuffer);
					HAL_UART_Transmit_IT(&huart2, TxBuffer, strlen((char*)TxBuffer));
 80009e4:	483a      	ldr	r0, [pc, #232]	; (8000ad0 <HAL_UART_RxCpltCallback+0x26c>)
 80009e6:	f7ff fbfb 	bl	80001e0 <strlen>
 80009ea:	4603      	mov	r3, r0
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	461a      	mov	r2, r3
 80009f0:	4937      	ldr	r1, [pc, #220]	; (8000ad0 <HAL_UART_RxCpltCallback+0x26c>)
 80009f2:	4832      	ldr	r0, [pc, #200]	; (8000abc <HAL_UART_RxCpltCallback+0x258>)
 80009f4:	f001 fad5 	bl	8001fa2 <HAL_UART_Transmit_IT>
 80009f8:	e025      	b.n	8000a46 <HAL_UART_RxCpltCallback+0x1e2>
				}
			}
			else if(RxBuffer[0] == 'x'){
 80009fa:	4b33      	ldr	r3, [pc, #204]	; (8000ac8 <HAL_UART_RxCpltCallback+0x264>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2b78      	cmp	r3, #120	; 0x78
 8000a00:	d112      	bne.n	8000a28 <HAL_UART_RxCpltCallback+0x1c4>
				 sprintf((char*)UI,"%s\r\n-------------- Welcome to main menu -------------\r\n\n"
 8000a02:	4a31      	ldr	r2, [pc, #196]	; (8000ac8 <HAL_UART_RxCpltCallback+0x264>)
 8000a04:	493b      	ldr	r1, [pc, #236]	; (8000af4 <HAL_UART_RxCpltCallback+0x290>)
 8000a06:	4835      	ldr	r0, [pc, #212]	; (8000adc <HAL_UART_RxCpltCallback+0x278>)
 8000a08:	f002 fa6c 	bl	8002ee4 <siprintf>
						  "**Please enter information to select a function.**\r\n"
						  "Select 0 To LED Control\r\n"
						  "Select 1 To Button Status\r\n"
						  "=================================================\r\n"
						  "Enter you select this one : ",RxBuffer);
				  HAL_UART_Transmit_IT(&huart2, UI, strlen((char*)UI));
 8000a0c:	4833      	ldr	r0, [pc, #204]	; (8000adc <HAL_UART_RxCpltCallback+0x278>)
 8000a0e:	f7ff fbe7 	bl	80001e0 <strlen>
 8000a12:	4603      	mov	r3, r0
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	461a      	mov	r2, r3
 8000a18:	4930      	ldr	r1, [pc, #192]	; (8000adc <HAL_UART_RxCpltCallback+0x278>)
 8000a1a:	4828      	ldr	r0, [pc, #160]	; (8000abc <HAL_UART_RxCpltCallback+0x258>)
 8000a1c:	f001 fac1 	bl	8001fa2 <HAL_UART_Transmit_IT>
				  CheckLedMenu=0;
 8000a20:	4b28      	ldr	r3, [pc, #160]	; (8000ac4 <HAL_UART_RxCpltCallback+0x260>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	701a      	strb	r2, [r3, #0]
 8000a26:	e00e      	b.n	8000a46 <HAL_UART_RxCpltCallback+0x1e2>
			}
			else{
				sprintf((char*)UI,"%s\r\n**Please select to choice**\r\n" //check choice to select incorrect
 8000a28:	4a27      	ldr	r2, [pc, #156]	; (8000ac8 <HAL_UART_RxCpltCallback+0x264>)
 8000a2a:	4933      	ldr	r1, [pc, #204]	; (8000af8 <HAL_UART_RxCpltCallback+0x294>)
 8000a2c:	482b      	ldr	r0, [pc, #172]	; (8000adc <HAL_UART_RxCpltCallback+0x278>)
 8000a2e:	f002 fa59 	bl	8002ee4 <siprintf>
						"Select s To Speed Down -1Hz\r\n"
						"Select d To On/OFF\r\n"
						"Select x To Back to main menu\r\n"
						"==================================================\r\n"
						"Enter you select this one : ",RxBuffer);
				HAL_UART_Transmit_IT(&huart2, UI, strlen((char*)UI));
 8000a32:	482a      	ldr	r0, [pc, #168]	; (8000adc <HAL_UART_RxCpltCallback+0x278>)
 8000a34:	f7ff fbd4 	bl	80001e0 <strlen>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4927      	ldr	r1, [pc, #156]	; (8000adc <HAL_UART_RxCpltCallback+0x278>)
 8000a40:	481e      	ldr	r0, [pc, #120]	; (8000abc <HAL_UART_RxCpltCallback+0x258>)
 8000a42:	f001 faae 	bl	8001fa2 <HAL_UART_Transmit_IT>
				}
		}
		if(CheckLedMenu == 2 && OK == 1){
 8000a46:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <HAL_UART_RxCpltCallback+0x260>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	d12c      	bne.n	8000aa8 <HAL_UART_RxCpltCallback+0x244>
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <HAL_UART_RxCpltCallback+0x25c>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d128      	bne.n	8000aa8 <HAL_UART_RxCpltCallback+0x244>
		if(RxBuffer[0] == 'x'){ //check choice button
 8000a56:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <HAL_UART_RxCpltCallback+0x264>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b78      	cmp	r3, #120	; 0x78
 8000a5c:	d115      	bne.n	8000a8a <HAL_UART_RxCpltCallback+0x226>
								 sprintf((char*)UI,"%s\r\n-------------- Welcome to main menu -------------\r\n\n"
 8000a5e:	4a1a      	ldr	r2, [pc, #104]	; (8000ac8 <HAL_UART_RxCpltCallback+0x264>)
 8000a60:	4926      	ldr	r1, [pc, #152]	; (8000afc <HAL_UART_RxCpltCallback+0x298>)
 8000a62:	481e      	ldr	r0, [pc, #120]	; (8000adc <HAL_UART_RxCpltCallback+0x278>)
 8000a64:	f002 fa3e 	bl	8002ee4 <siprintf>
										  "**Please enter information to select a function.**\r\n"
										  "Select 0 To LED Control\r\n"
										  "Select 1 To Button Status\r\n"
										  "================================================\r\n"
										  "Enter you select this one : ",RxBuffer);
								  HAL_UART_Transmit_IT(&huart2, UI, strlen((char*)UI));
 8000a68:	481c      	ldr	r0, [pc, #112]	; (8000adc <HAL_UART_RxCpltCallback+0x278>)
 8000a6a:	f7ff fbb9 	bl	80001e0 <strlen>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	461a      	mov	r2, r3
 8000a74:	4919      	ldr	r1, [pc, #100]	; (8000adc <HAL_UART_RxCpltCallback+0x278>)
 8000a76:	4811      	ldr	r0, [pc, #68]	; (8000abc <HAL_UART_RxCpltCallback+0x258>)
 8000a78:	f001 fa93 	bl	8001fa2 <HAL_UART_Transmit_IT>
								  CheckLedMenu=0;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <HAL_UART_RxCpltCallback+0x260>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	701a      	strb	r2, [r3, #0]
								  OK=0;
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <HAL_UART_RxCpltCallback+0x25c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]
 8000a88:	e00e      	b.n	8000aa8 <HAL_UART_RxCpltCallback+0x244>
							}
		else{
			sprintf((char*)UI,"%s\r\n**Please select to choice**\r\n" //check choice to select incorrect
 8000a8a:	4a0f      	ldr	r2, [pc, #60]	; (8000ac8 <HAL_UART_RxCpltCallback+0x264>)
 8000a8c:	491c      	ldr	r1, [pc, #112]	; (8000b00 <HAL_UART_RxCpltCallback+0x29c>)
 8000a8e:	4813      	ldr	r0, [pc, #76]	; (8000adc <HAL_UART_RxCpltCallback+0x278>)
 8000a90:	f002 fa28 	bl	8002ee4 <siprintf>
					"Select x To Back to main menu\r\n"
					"Button Status is UNPRESS\r\n"
					"================================================\r\n"
					"Enter you select this one : ",RxBuffer);
			HAL_UART_Transmit_IT(&huart2, UI, strlen((char*)UI));
 8000a94:	4811      	ldr	r0, [pc, #68]	; (8000adc <HAL_UART_RxCpltCallback+0x278>)
 8000a96:	f7ff fba3 	bl	80001e0 <strlen>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	490e      	ldr	r1, [pc, #56]	; (8000adc <HAL_UART_RxCpltCallback+0x278>)
 8000aa2:	4806      	ldr	r0, [pc, #24]	; (8000abc <HAL_UART_RxCpltCallback+0x258>)
 8000aa4:	f001 fa7d 	bl	8001fa2 <HAL_UART_Transmit_IT>
					}
		}
		HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	4907      	ldr	r1, [pc, #28]	; (8000ac8 <HAL_UART_RxCpltCallback+0x264>)
 8000aac:	4803      	ldr	r0, [pc, #12]	; (8000abc <HAL_UART_RxCpltCallback+0x258>)
 8000aae:	f001 fabd 	bl	800202c <HAL_UART_Receive_IT>
	}
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000090 	.word	0x20000090
 8000ac0:	20000306 	.word	0x20000306
 8000ac4:	20000304 	.word	0x20000304
 8000ac8:	200000d4 	.word	0x200000d4
 8000acc:	080038c4 	.word	0x080038c4
 8000ad0:	200000e8 	.word	0x200000e8
 8000ad4:	080039ec 	.word	0x080039ec
 8000ad8:	08003ae4 	.word	0x08003ae4
 8000adc:	20000110 	.word	0x20000110
 8000ae0:	20000001 	.word	0x20000001
 8000ae4:	08003b8c 	.word	0x08003b8c
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	08003bc0 	.word	0x08003bc0
 8000af0:	08003bec 	.word	0x08003bec
 8000af4:	08003c18 	.word	0x08003c18
 8000af8:	08003d08 	.word	0x08003d08
 8000afc:	08003de8 	.word	0x08003de8
 8000b00:	08003ed8 	.word	0x08003ed8

08000b04 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){ //button ex interrupt
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8000b0e:	88fb      	ldrh	r3, [r7, #6]
 8000b10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b14:	d13c      	bne.n	8000b90 <HAL_GPIO_EXTI_Callback+0x8c>
		if(CheckLedMenu == 2)press = press+1;
 8000b16:	4b20      	ldr	r3, [pc, #128]	; (8000b98 <HAL_GPIO_EXTI_Callback+0x94>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2b02      	cmp	r3, #2
 8000b1c:	d105      	bne.n	8000b2a <HAL_GPIO_EXTI_Callback+0x26>
 8000b1e:	4b1f      	ldr	r3, [pc, #124]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x98>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	3301      	adds	r3, #1
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x98>)
 8000b28:	701a      	strb	r2, [r3, #0]
		if(CheckLedMenu == 2 && press == 1){
 8000b2a:	4b1b      	ldr	r3, [pc, #108]	; (8000b98 <HAL_GPIO_EXTI_Callback+0x94>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d114      	bne.n	8000b5c <HAL_GPIO_EXTI_Callback+0x58>
 8000b32:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x98>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d110      	bne.n	8000b5c <HAL_GPIO_EXTI_Callback+0x58>
			sprintf((char*)TxBuffer,"%s\r\n---------- Welcome to Button Status ----------\r\n\n"
 8000b3a:	4a19      	ldr	r2, [pc, #100]	; (8000ba0 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000b3c:	4919      	ldr	r1, [pc, #100]	; (8000ba4 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000b3e:	481a      	ldr	r0, [pc, #104]	; (8000ba8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000b40:	f002 f9d0 	bl	8002ee4 <siprintf>
								"**Please enter information to select a function.**\r\n"
								"Select x To Back to main menu\r\n"
								"Button Status is PRESS\r\n"
								"================================================\r\n"
								"Enter you select this one : ",RxBuffer);
						HAL_UART_Transmit_IT(&huart2, TxBuffer, strlen((char*)TxBuffer));
 8000b44:	4818      	ldr	r0, [pc, #96]	; (8000ba8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000b46:	f7ff fb4b 	bl	80001e0 <strlen>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4915      	ldr	r1, [pc, #84]	; (8000ba8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000b52:	4816      	ldr	r0, [pc, #88]	; (8000bac <HAL_GPIO_EXTI_Callback+0xa8>)
 8000b54:	f001 fa25 	bl	8001fa2 <HAL_UART_Transmit_IT>
		if(CheckLedMenu == 2 && press == 1){
 8000b58:	bf00      	nop
								"Enter you select this one : ",RxBuffer);
						HAL_UART_Transmit_IT(&huart2, TxBuffer, strlen((char*)TxBuffer));
			press=0;
		}
	}
}
 8000b5a:	e019      	b.n	8000b90 <HAL_GPIO_EXTI_Callback+0x8c>
		else if(CheckLedMenu == 2 && press == 2){
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_GPIO_EXTI_Callback+0x94>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b02      	cmp	r3, #2
 8000b62:	d115      	bne.n	8000b90 <HAL_GPIO_EXTI_Callback+0x8c>
 8000b64:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x98>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	d111      	bne.n	8000b90 <HAL_GPIO_EXTI_Callback+0x8c>
			sprintf((char*)TxBuffer,"%s\r\n---------- Welcome to Button Status ----------\r\n\n"
 8000b6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ba0 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000b6e:	4910      	ldr	r1, [pc, #64]	; (8000bb0 <HAL_GPIO_EXTI_Callback+0xac>)
 8000b70:	480d      	ldr	r0, [pc, #52]	; (8000ba8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000b72:	f002 f9b7 	bl	8002ee4 <siprintf>
						HAL_UART_Transmit_IT(&huart2, TxBuffer, strlen((char*)TxBuffer));
 8000b76:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000b78:	f7ff fb32 	bl	80001e0 <strlen>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	461a      	mov	r2, r3
 8000b82:	4909      	ldr	r1, [pc, #36]	; (8000ba8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000b84:	4809      	ldr	r0, [pc, #36]	; (8000bac <HAL_GPIO_EXTI_Callback+0xa8>)
 8000b86:	f001 fa0c 	bl	8001fa2 <HAL_UART_Transmit_IT>
			press=0;
 8000b8a:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x98>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]
}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000304 	.word	0x20000304
 8000b9c:	20000305 	.word	0x20000305
 8000ba0:	200000d4 	.word	0x200000d4
 8000ba4:	08003f84 	.word	0x08003f84
 8000ba8:	200000e8 	.word	0x200000e8
 8000bac:	20000090 	.word	0x20000090
 8000bb0:	08004074 	.word	0x08004074

08000bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb8:	b672      	cpsid	i
}
 8000bba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <Error_Handler+0x8>
	...

08000bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	4a0f      	ldr	r2, [pc, #60]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	603b      	str	r3, [r7, #0]
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <HAL_MspInit+0x4c>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	4a08      	ldr	r2, [pc, #32]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_MspInit+0x4c>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfa:	603b      	str	r3, [r7, #0]
 8000bfc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bfe:	2007      	movs	r0, #7
 8000c00:	f000 fa46 	bl	8001090 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c04:	bf00      	nop
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40023800 	.word	0x40023800

08000c10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a1d      	ldr	r2, [pc, #116]	; (8000ca4 <HAL_UART_MspInit+0x94>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d133      	bne.n	8000c9a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <HAL_UART_MspInit+0x98>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	4a1b      	ldr	r2, [pc, #108]	; (8000ca8 <HAL_UART_MspInit+0x98>)
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c40:	6413      	str	r3, [r2, #64]	; 0x40
 8000c42:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <HAL_UART_MspInit+0x98>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <HAL_UART_MspInit+0x98>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a14      	ldr	r2, [pc, #80]	; (8000ca8 <HAL_UART_MspInit+0x98>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <HAL_UART_MspInit+0x98>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c6a:	230c      	movs	r3, #12
 8000c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c76:	2303      	movs	r3, #3
 8000c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c7a:	2307      	movs	r3, #7
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4619      	mov	r1, r3
 8000c84:	4809      	ldr	r0, [pc, #36]	; (8000cac <HAL_UART_MspInit+0x9c>)
 8000c86:	f000 fad7 	bl	8001238 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2026      	movs	r0, #38	; 0x26
 8000c90:	f000 fa09 	bl	80010a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c94:	2026      	movs	r0, #38	; 0x26
 8000c96:	f000 fa22 	bl	80010de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c9a:	bf00      	nop
 8000c9c:	3728      	adds	r7, #40	; 0x28
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40004400 	.word	0x40004400
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020000 	.word	0x40020000

08000cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <NMI_Handler+0x4>

08000cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cba:	e7fe      	b.n	8000cba <HardFault_Handler+0x4>

08000cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <MemManage_Handler+0x4>

08000cc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <BusFault_Handler+0x4>

08000cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <UsageFault_Handler+0x4>

08000cce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cfc:	f000 f8d8 	bl	8000eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d08:	4802      	ldr	r0, [pc, #8]	; (8000d14 <USART2_IRQHandler+0x10>)
 8000d0a:	f001 f9bf 	bl	800208c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000090 	.word	0x20000090

08000d18 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d1c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d20:	f000 fc42 	bl	80015a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d30:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <_sbrk+0x5c>)
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <_sbrk+0x60>)
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d102      	bne.n	8000d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <_sbrk+0x64>)
 8000d46:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <_sbrk+0x68>)
 8000d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d207      	bcs.n	8000d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d58:	f002 f892 	bl	8002e80 <__errno>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	220c      	movs	r2, #12
 8000d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	e009      	b.n	8000d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6e:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <_sbrk+0x64>)
 8000d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20020000 	.word	0x20020000
 8000d88:	00000400 	.word	0x00000400
 8000d8c:	2000030c 	.word	0x2000030c
 8000d90:	20000328 	.word	0x20000328

08000d94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <SystemInit+0x20>)
 8000d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <SystemInit+0x20>)
 8000da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000db8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dbc:	480d      	ldr	r0, [pc, #52]	; (8000df4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dbe:	490e      	ldr	r1, [pc, #56]	; (8000df8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dc0:	4a0e      	ldr	r2, [pc, #56]	; (8000dfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc4:	e002      	b.n	8000dcc <LoopCopyDataInit>

08000dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dca:	3304      	adds	r3, #4

08000dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd0:	d3f9      	bcc.n	8000dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd2:	4a0b      	ldr	r2, [pc, #44]	; (8000e00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dd4:	4c0b      	ldr	r4, [pc, #44]	; (8000e04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd8:	e001      	b.n	8000dde <LoopFillZerobss>

08000dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ddc:	3204      	adds	r2, #4

08000dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de0:	d3fb      	bcc.n	8000dda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000de2:	f7ff ffd7 	bl	8000d94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000de6:	f002 f851 	bl	8002e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dea:	f7ff fbd3 	bl	8000594 <main>
  bx  lr    
 8000dee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000df0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000dfc:	080041c4 	.word	0x080041c4
  ldr r2, =_sbss
 8000e00:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e04:	20000324 	.word	0x20000324

08000e08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e08:	e7fe      	b.n	8000e08 <ADC_IRQHandler>
	...

08000e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e10:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0d      	ldr	r2, [pc, #52]	; (8000e4c <HAL_Init+0x40>)
 8000e16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <HAL_Init+0x40>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <HAL_Init+0x40>)
 8000e22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <HAL_Init+0x40>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a07      	ldr	r2, [pc, #28]	; (8000e4c <HAL_Init+0x40>)
 8000e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e34:	2003      	movs	r0, #3
 8000e36:	f000 f92b 	bl	8001090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f000 f808 	bl	8000e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e40:	f7ff febe 	bl	8000bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40023c00 	.word	0x40023c00

08000e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_InitTick+0x54>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_InitTick+0x58>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4619      	mov	r1, r3
 8000e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 f943 	bl	80010fa <HAL_SYSTICK_Config>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00e      	b.n	8000e9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b0f      	cmp	r3, #15
 8000e82:	d80a      	bhi.n	8000e9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e84:	2200      	movs	r2, #0
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8c:	f000 f90b 	bl	80010a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e90:	4a06      	ldr	r2, [pc, #24]	; (8000eac <HAL_InitTick+0x5c>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e96:	2300      	movs	r3, #0
 8000e98:	e000      	b.n	8000e9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000004 	.word	0x20000004
 8000ea8:	2000000c 	.word	0x2000000c
 8000eac:	20000008 	.word	0x20000008

08000eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x20>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ec2:	6013      	str	r3, [r2, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	2000000c 	.word	0x2000000c
 8000ed4:	20000310 	.word	0x20000310

08000ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return uwTick;
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <HAL_GetTick+0x14>)
 8000ede:	681b      	ldr	r3, [r3, #0]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000310 	.word	0x20000310

08000ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f22:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	60d3      	str	r3, [r2, #12]
}
 8000f28:	bf00      	nop
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <__NVIC_GetPriorityGrouping+0x18>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	0a1b      	lsrs	r3, r3, #8
 8000f42:	f003 0307 	and.w	r3, r3, #7
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	db0b      	blt.n	8000f7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	f003 021f 	and.w	r2, r3, #31
 8000f6c:	4907      	ldr	r1, [pc, #28]	; (8000f8c <__NVIC_EnableIRQ+0x38>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	095b      	lsrs	r3, r3, #5
 8000f74:	2001      	movs	r0, #1
 8000f76:	fa00 f202 	lsl.w	r2, r0, r2
 8000f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000e100 	.word	0xe000e100

08000f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	db0a      	blt.n	8000fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	490c      	ldr	r1, [pc, #48]	; (8000fdc <__NVIC_SetPriority+0x4c>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	0112      	lsls	r2, r2, #4
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb8:	e00a      	b.n	8000fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4908      	ldr	r1, [pc, #32]	; (8000fe0 <__NVIC_SetPriority+0x50>)
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	f003 030f 	and.w	r3, r3, #15
 8000fc6:	3b04      	subs	r3, #4
 8000fc8:	0112      	lsls	r2, r2, #4
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	440b      	add	r3, r1
 8000fce:	761a      	strb	r2, [r3, #24]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000e100 	.word	0xe000e100
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b089      	sub	sp, #36	; 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f1c3 0307 	rsb	r3, r3, #7
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	bf28      	it	cs
 8001002:	2304      	movcs	r3, #4
 8001004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3304      	adds	r3, #4
 800100a:	2b06      	cmp	r3, #6
 800100c:	d902      	bls.n	8001014 <NVIC_EncodePriority+0x30>
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3b03      	subs	r3, #3
 8001012:	e000      	b.n	8001016 <NVIC_EncodePriority+0x32>
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	f04f 32ff 	mov.w	r2, #4294967295
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43da      	mvns	r2, r3
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	401a      	ands	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800102c:	f04f 31ff 	mov.w	r1, #4294967295
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	43d9      	mvns	r1, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	4313      	orrs	r3, r2
         );
}
 800103e:	4618      	mov	r0, r3
 8001040:	3724      	adds	r7, #36	; 0x24
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3b01      	subs	r3, #1
 8001058:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800105c:	d301      	bcc.n	8001062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800105e:	2301      	movs	r3, #1
 8001060:	e00f      	b.n	8001082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001062:	4a0a      	ldr	r2, [pc, #40]	; (800108c <SysTick_Config+0x40>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106a:	210f      	movs	r1, #15
 800106c:	f04f 30ff 	mov.w	r0, #4294967295
 8001070:	f7ff ff8e 	bl	8000f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <SysTick_Config+0x40>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107a:	4b04      	ldr	r3, [pc, #16]	; (800108c <SysTick_Config+0x40>)
 800107c:	2207      	movs	r2, #7
 800107e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	e000e010 	.word	0xe000e010

08001090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ff29 	bl	8000ef0 <__NVIC_SetPriorityGrouping>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b086      	sub	sp, #24
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
 80010b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b8:	f7ff ff3e 	bl	8000f38 <__NVIC_GetPriorityGrouping>
 80010bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	68b9      	ldr	r1, [r7, #8]
 80010c2:	6978      	ldr	r0, [r7, #20]
 80010c4:	f7ff ff8e 	bl	8000fe4 <NVIC_EncodePriority>
 80010c8:	4602      	mov	r2, r0
 80010ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff5d 	bl	8000f90 <__NVIC_SetPriority>
}
 80010d6:	bf00      	nop
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff31 	bl	8000f54 <__NVIC_EnableIRQ>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ffa2 	bl	800104c <SysTick_Config>
 8001108:	4603      	mov	r3, r0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001120:	f7ff feda 	bl	8000ed8 <HAL_GetTick>
 8001124:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b02      	cmp	r3, #2
 8001130:	d008      	beq.n	8001144 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2280      	movs	r2, #128	; 0x80
 8001136:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e052      	b.n	80011ea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f022 0216 	bic.w	r2, r2, #22
 8001152:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	695a      	ldr	r2, [r3, #20]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001162:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	2b00      	cmp	r3, #0
 800116a:	d103      	bne.n	8001174 <HAL_DMA_Abort+0x62>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001170:	2b00      	cmp	r3, #0
 8001172:	d007      	beq.n	8001184 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f022 0208 	bic.w	r2, r2, #8
 8001182:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 0201 	bic.w	r2, r2, #1
 8001192:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001194:	e013      	b.n	80011be <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001196:	f7ff fe9f 	bl	8000ed8 <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b05      	cmp	r3, #5
 80011a2:	d90c      	bls.n	80011be <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2220      	movs	r2, #32
 80011a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2203      	movs	r2, #3
 80011ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e015      	b.n	80011ea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1e4      	bne.n	8001196 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d0:	223f      	movs	r2, #63	; 0x3f
 80011d2:	409a      	lsls	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2201      	movs	r2, #1
 80011dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b083      	sub	sp, #12
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d004      	beq.n	8001210 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2280      	movs	r2, #128	; 0x80
 800120a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e00c      	b.n	800122a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2205      	movs	r2, #5
 8001214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f022 0201 	bic.w	r2, r2, #1
 8001226:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800124a:	2300      	movs	r3, #0
 800124c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
 8001252:	e159      	b.n	8001508 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001254:	2201      	movs	r2, #1
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	429a      	cmp	r2, r3
 800126e:	f040 8148 	bne.w	8001502 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 0303 	and.w	r3, r3, #3
 800127a:	2b01      	cmp	r3, #1
 800127c:	d005      	beq.n	800128a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001286:	2b02      	cmp	r3, #2
 8001288:	d130      	bne.n	80012ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	2203      	movs	r2, #3
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	68da      	ldr	r2, [r3, #12]
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012c0:	2201      	movs	r2, #1
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	091b      	lsrs	r3, r3, #4
 80012d6:	f003 0201 	and.w	r2, r3, #1
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	2b03      	cmp	r3, #3
 80012f6:	d017      	beq.n	8001328 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	2203      	movs	r2, #3
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d123      	bne.n	800137c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	08da      	lsrs	r2, r3, #3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3208      	adds	r2, #8
 800133c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001340:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	f003 0307 	and.w	r3, r3, #7
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	220f      	movs	r2, #15
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	691a      	ldr	r2, [r3, #16]
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	08da      	lsrs	r2, r3, #3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3208      	adds	r2, #8
 8001376:	69b9      	ldr	r1, [r7, #24]
 8001378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	2203      	movs	r2, #3
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 0203 	and.w	r2, r3, #3
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 80a2 	beq.w	8001502 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	4b57      	ldr	r3, [pc, #348]	; (8001520 <HAL_GPIO_Init+0x2e8>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	4a56      	ldr	r2, [pc, #344]	; (8001520 <HAL_GPIO_Init+0x2e8>)
 80013c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013cc:	6453      	str	r3, [r2, #68]	; 0x44
 80013ce:	4b54      	ldr	r3, [pc, #336]	; (8001520 <HAL_GPIO_Init+0x2e8>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013da:	4a52      	ldr	r2, [pc, #328]	; (8001524 <HAL_GPIO_Init+0x2ec>)
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	089b      	lsrs	r3, r3, #2
 80013e0:	3302      	adds	r3, #2
 80013e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f003 0303 	and.w	r3, r3, #3
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	220f      	movs	r2, #15
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a49      	ldr	r2, [pc, #292]	; (8001528 <HAL_GPIO_Init+0x2f0>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d019      	beq.n	800143a <HAL_GPIO_Init+0x202>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a48      	ldr	r2, [pc, #288]	; (800152c <HAL_GPIO_Init+0x2f4>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d013      	beq.n	8001436 <HAL_GPIO_Init+0x1fe>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a47      	ldr	r2, [pc, #284]	; (8001530 <HAL_GPIO_Init+0x2f8>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d00d      	beq.n	8001432 <HAL_GPIO_Init+0x1fa>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a46      	ldr	r2, [pc, #280]	; (8001534 <HAL_GPIO_Init+0x2fc>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d007      	beq.n	800142e <HAL_GPIO_Init+0x1f6>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a45      	ldr	r2, [pc, #276]	; (8001538 <HAL_GPIO_Init+0x300>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d101      	bne.n	800142a <HAL_GPIO_Init+0x1f2>
 8001426:	2304      	movs	r3, #4
 8001428:	e008      	b.n	800143c <HAL_GPIO_Init+0x204>
 800142a:	2307      	movs	r3, #7
 800142c:	e006      	b.n	800143c <HAL_GPIO_Init+0x204>
 800142e:	2303      	movs	r3, #3
 8001430:	e004      	b.n	800143c <HAL_GPIO_Init+0x204>
 8001432:	2302      	movs	r3, #2
 8001434:	e002      	b.n	800143c <HAL_GPIO_Init+0x204>
 8001436:	2301      	movs	r3, #1
 8001438:	e000      	b.n	800143c <HAL_GPIO_Init+0x204>
 800143a:	2300      	movs	r3, #0
 800143c:	69fa      	ldr	r2, [r7, #28]
 800143e:	f002 0203 	and.w	r2, r2, #3
 8001442:	0092      	lsls	r2, r2, #2
 8001444:	4093      	lsls	r3, r2
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4313      	orrs	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800144c:	4935      	ldr	r1, [pc, #212]	; (8001524 <HAL_GPIO_Init+0x2ec>)
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	089b      	lsrs	r3, r3, #2
 8001452:	3302      	adds	r3, #2
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800145a:	4b38      	ldr	r3, [pc, #224]	; (800153c <HAL_GPIO_Init+0x304>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	43db      	mvns	r3, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4013      	ands	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800147e:	4a2f      	ldr	r2, [pc, #188]	; (800153c <HAL_GPIO_Init+0x304>)
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001484:	4b2d      	ldr	r3, [pc, #180]	; (800153c <HAL_GPIO_Init+0x304>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	43db      	mvns	r3, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4013      	ands	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014a8:	4a24      	ldr	r2, [pc, #144]	; (800153c <HAL_GPIO_Init+0x304>)
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014ae:	4b23      	ldr	r3, [pc, #140]	; (800153c <HAL_GPIO_Init+0x304>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	43db      	mvns	r3, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4013      	ands	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014d2:	4a1a      	ldr	r2, [pc, #104]	; (800153c <HAL_GPIO_Init+0x304>)
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014d8:	4b18      	ldr	r3, [pc, #96]	; (800153c <HAL_GPIO_Init+0x304>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d003      	beq.n	80014fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014fc:	4a0f      	ldr	r2, [pc, #60]	; (800153c <HAL_GPIO_Init+0x304>)
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3301      	adds	r3, #1
 8001506:	61fb      	str	r3, [r7, #28]
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	2b0f      	cmp	r3, #15
 800150c:	f67f aea2 	bls.w	8001254 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001510:	bf00      	nop
 8001512:	bf00      	nop
 8001514:	3724      	adds	r7, #36	; 0x24
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	40023800 	.word	0x40023800
 8001524:	40013800 	.word	0x40013800
 8001528:	40020000 	.word	0x40020000
 800152c:	40020400 	.word	0x40020400
 8001530:	40020800 	.word	0x40020800
 8001534:	40020c00 	.word	0x40020c00
 8001538:	40021000 	.word	0x40021000
 800153c:	40013c00 	.word	0x40013c00

08001540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	807b      	strh	r3, [r7, #2]
 800154c:	4613      	mov	r3, r2
 800154e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001550:	787b      	ldrb	r3, [r7, #1]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001556:	887a      	ldrh	r2, [r7, #2]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800155c:	e003      	b.n	8001566 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800155e:	887b      	ldrh	r3, [r7, #2]
 8001560:	041a      	lsls	r2, r3, #16
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	619a      	str	r2, [r3, #24]
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001572:	b480      	push	{r7}
 8001574:	b085      	sub	sp, #20
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
 800157a:	460b      	mov	r3, r1
 800157c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001584:	887a      	ldrh	r2, [r7, #2]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	4013      	ands	r3, r2
 800158a:	041a      	lsls	r2, r3, #16
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	43d9      	mvns	r1, r3
 8001590:	887b      	ldrh	r3, [r7, #2]
 8001592:	400b      	ands	r3, r1
 8001594:	431a      	orrs	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	619a      	str	r2, [r3, #24]
}
 800159a:	bf00      	nop
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015b4:	695a      	ldr	r2, [r3, #20]
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	4013      	ands	r3, r2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d006      	beq.n	80015cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015be:	4a05      	ldr	r2, [pc, #20]	; (80015d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015c4:	88fb      	ldrh	r3, [r7, #6]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fa9c 	bl	8000b04 <HAL_GPIO_EXTI_Callback>
  }
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40013c00 	.word	0x40013c00

080015d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e267      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d075      	beq.n	80016e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015f6:	4b88      	ldr	r3, [pc, #544]	; (8001818 <HAL_RCC_OscConfig+0x240>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 030c 	and.w	r3, r3, #12
 80015fe:	2b04      	cmp	r3, #4
 8001600:	d00c      	beq.n	800161c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001602:	4b85      	ldr	r3, [pc, #532]	; (8001818 <HAL_RCC_OscConfig+0x240>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800160a:	2b08      	cmp	r3, #8
 800160c:	d112      	bne.n	8001634 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800160e:	4b82      	ldr	r3, [pc, #520]	; (8001818 <HAL_RCC_OscConfig+0x240>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001616:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800161a:	d10b      	bne.n	8001634 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800161c:	4b7e      	ldr	r3, [pc, #504]	; (8001818 <HAL_RCC_OscConfig+0x240>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d05b      	beq.n	80016e0 <HAL_RCC_OscConfig+0x108>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d157      	bne.n	80016e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e242      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800163c:	d106      	bne.n	800164c <HAL_RCC_OscConfig+0x74>
 800163e:	4b76      	ldr	r3, [pc, #472]	; (8001818 <HAL_RCC_OscConfig+0x240>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a75      	ldr	r2, [pc, #468]	; (8001818 <HAL_RCC_OscConfig+0x240>)
 8001644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	e01d      	b.n	8001688 <HAL_RCC_OscConfig+0xb0>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001654:	d10c      	bne.n	8001670 <HAL_RCC_OscConfig+0x98>
 8001656:	4b70      	ldr	r3, [pc, #448]	; (8001818 <HAL_RCC_OscConfig+0x240>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a6f      	ldr	r2, [pc, #444]	; (8001818 <HAL_RCC_OscConfig+0x240>)
 800165c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	4b6d      	ldr	r3, [pc, #436]	; (8001818 <HAL_RCC_OscConfig+0x240>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a6c      	ldr	r2, [pc, #432]	; (8001818 <HAL_RCC_OscConfig+0x240>)
 8001668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	e00b      	b.n	8001688 <HAL_RCC_OscConfig+0xb0>
 8001670:	4b69      	ldr	r3, [pc, #420]	; (8001818 <HAL_RCC_OscConfig+0x240>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a68      	ldr	r2, [pc, #416]	; (8001818 <HAL_RCC_OscConfig+0x240>)
 8001676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	4b66      	ldr	r3, [pc, #408]	; (8001818 <HAL_RCC_OscConfig+0x240>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a65      	ldr	r2, [pc, #404]	; (8001818 <HAL_RCC_OscConfig+0x240>)
 8001682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001686:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d013      	beq.n	80016b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001690:	f7ff fc22 	bl	8000ed8 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001698:	f7ff fc1e 	bl	8000ed8 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b64      	cmp	r3, #100	; 0x64
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e207      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016aa:	4b5b      	ldr	r3, [pc, #364]	; (8001818 <HAL_RCC_OscConfig+0x240>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d0f0      	beq.n	8001698 <HAL_RCC_OscConfig+0xc0>
 80016b6:	e014      	b.n	80016e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b8:	f7ff fc0e 	bl	8000ed8 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016c0:	f7ff fc0a 	bl	8000ed8 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b64      	cmp	r3, #100	; 0x64
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e1f3      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d2:	4b51      	ldr	r3, [pc, #324]	; (8001818 <HAL_RCC_OscConfig+0x240>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0xe8>
 80016de:	e000      	b.n	80016e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d063      	beq.n	80017b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016ee:	4b4a      	ldr	r3, [pc, #296]	; (8001818 <HAL_RCC_OscConfig+0x240>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 030c 	and.w	r3, r3, #12
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00b      	beq.n	8001712 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016fa:	4b47      	ldr	r3, [pc, #284]	; (8001818 <HAL_RCC_OscConfig+0x240>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001702:	2b08      	cmp	r3, #8
 8001704:	d11c      	bne.n	8001740 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001706:	4b44      	ldr	r3, [pc, #272]	; (8001818 <HAL_RCC_OscConfig+0x240>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d116      	bne.n	8001740 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001712:	4b41      	ldr	r3, [pc, #260]	; (8001818 <HAL_RCC_OscConfig+0x240>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d005      	beq.n	800172a <HAL_RCC_OscConfig+0x152>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d001      	beq.n	800172a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e1c7      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172a:	4b3b      	ldr	r3, [pc, #236]	; (8001818 <HAL_RCC_OscConfig+0x240>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	4937      	ldr	r1, [pc, #220]	; (8001818 <HAL_RCC_OscConfig+0x240>)
 800173a:	4313      	orrs	r3, r2
 800173c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800173e:	e03a      	b.n	80017b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d020      	beq.n	800178a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001748:	4b34      	ldr	r3, [pc, #208]	; (800181c <HAL_RCC_OscConfig+0x244>)
 800174a:	2201      	movs	r2, #1
 800174c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174e:	f7ff fbc3 	bl	8000ed8 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001756:	f7ff fbbf 	bl	8000ed8 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e1a8      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001768:	4b2b      	ldr	r3, [pc, #172]	; (8001818 <HAL_RCC_OscConfig+0x240>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0f0      	beq.n	8001756 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001774:	4b28      	ldr	r3, [pc, #160]	; (8001818 <HAL_RCC_OscConfig+0x240>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	4925      	ldr	r1, [pc, #148]	; (8001818 <HAL_RCC_OscConfig+0x240>)
 8001784:	4313      	orrs	r3, r2
 8001786:	600b      	str	r3, [r1, #0]
 8001788:	e015      	b.n	80017b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800178a:	4b24      	ldr	r3, [pc, #144]	; (800181c <HAL_RCC_OscConfig+0x244>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001790:	f7ff fba2 	bl	8000ed8 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001798:	f7ff fb9e 	bl	8000ed8 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e187      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017aa:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <HAL_RCC_OscConfig+0x240>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f0      	bne.n	8001798 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0308 	and.w	r3, r3, #8
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d036      	beq.n	8001830 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d016      	beq.n	80017f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ca:	4b15      	ldr	r3, [pc, #84]	; (8001820 <HAL_RCC_OscConfig+0x248>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d0:	f7ff fb82 	bl	8000ed8 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017d8:	f7ff fb7e 	bl	8000ed8 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e167      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_RCC_OscConfig+0x240>)
 80017ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0x200>
 80017f6:	e01b      	b.n	8001830 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017f8:	4b09      	ldr	r3, [pc, #36]	; (8001820 <HAL_RCC_OscConfig+0x248>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017fe:	f7ff fb6b 	bl	8000ed8 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001804:	e00e      	b.n	8001824 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001806:	f7ff fb67 	bl	8000ed8 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d907      	bls.n	8001824 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e150      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
 8001818:	40023800 	.word	0x40023800
 800181c:	42470000 	.word	0x42470000
 8001820:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001824:	4b88      	ldr	r3, [pc, #544]	; (8001a48 <HAL_RCC_OscConfig+0x470>)
 8001826:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1ea      	bne.n	8001806 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 8097 	beq.w	800196c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800183e:	2300      	movs	r3, #0
 8001840:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001842:	4b81      	ldr	r3, [pc, #516]	; (8001a48 <HAL_RCC_OscConfig+0x470>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d10f      	bne.n	800186e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	4b7d      	ldr	r3, [pc, #500]	; (8001a48 <HAL_RCC_OscConfig+0x470>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	4a7c      	ldr	r2, [pc, #496]	; (8001a48 <HAL_RCC_OscConfig+0x470>)
 8001858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800185c:	6413      	str	r3, [r2, #64]	; 0x40
 800185e:	4b7a      	ldr	r3, [pc, #488]	; (8001a48 <HAL_RCC_OscConfig+0x470>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800186a:	2301      	movs	r3, #1
 800186c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186e:	4b77      	ldr	r3, [pc, #476]	; (8001a4c <HAL_RCC_OscConfig+0x474>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001876:	2b00      	cmp	r3, #0
 8001878:	d118      	bne.n	80018ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800187a:	4b74      	ldr	r3, [pc, #464]	; (8001a4c <HAL_RCC_OscConfig+0x474>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a73      	ldr	r2, [pc, #460]	; (8001a4c <HAL_RCC_OscConfig+0x474>)
 8001880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001884:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001886:	f7ff fb27 	bl	8000ed8 <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800188e:	f7ff fb23 	bl	8000ed8 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e10c      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a0:	4b6a      	ldr	r3, [pc, #424]	; (8001a4c <HAL_RCC_OscConfig+0x474>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0f0      	beq.n	800188e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d106      	bne.n	80018c2 <HAL_RCC_OscConfig+0x2ea>
 80018b4:	4b64      	ldr	r3, [pc, #400]	; (8001a48 <HAL_RCC_OscConfig+0x470>)
 80018b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b8:	4a63      	ldr	r2, [pc, #396]	; (8001a48 <HAL_RCC_OscConfig+0x470>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	6713      	str	r3, [r2, #112]	; 0x70
 80018c0:	e01c      	b.n	80018fc <HAL_RCC_OscConfig+0x324>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	2b05      	cmp	r3, #5
 80018c8:	d10c      	bne.n	80018e4 <HAL_RCC_OscConfig+0x30c>
 80018ca:	4b5f      	ldr	r3, [pc, #380]	; (8001a48 <HAL_RCC_OscConfig+0x470>)
 80018cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ce:	4a5e      	ldr	r2, [pc, #376]	; (8001a48 <HAL_RCC_OscConfig+0x470>)
 80018d0:	f043 0304 	orr.w	r3, r3, #4
 80018d4:	6713      	str	r3, [r2, #112]	; 0x70
 80018d6:	4b5c      	ldr	r3, [pc, #368]	; (8001a48 <HAL_RCC_OscConfig+0x470>)
 80018d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018da:	4a5b      	ldr	r2, [pc, #364]	; (8001a48 <HAL_RCC_OscConfig+0x470>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6713      	str	r3, [r2, #112]	; 0x70
 80018e2:	e00b      	b.n	80018fc <HAL_RCC_OscConfig+0x324>
 80018e4:	4b58      	ldr	r3, [pc, #352]	; (8001a48 <HAL_RCC_OscConfig+0x470>)
 80018e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e8:	4a57      	ldr	r2, [pc, #348]	; (8001a48 <HAL_RCC_OscConfig+0x470>)
 80018ea:	f023 0301 	bic.w	r3, r3, #1
 80018ee:	6713      	str	r3, [r2, #112]	; 0x70
 80018f0:	4b55      	ldr	r3, [pc, #340]	; (8001a48 <HAL_RCC_OscConfig+0x470>)
 80018f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f4:	4a54      	ldr	r2, [pc, #336]	; (8001a48 <HAL_RCC_OscConfig+0x470>)
 80018f6:	f023 0304 	bic.w	r3, r3, #4
 80018fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d015      	beq.n	8001930 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001904:	f7ff fae8 	bl	8000ed8 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800190a:	e00a      	b.n	8001922 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800190c:	f7ff fae4 	bl	8000ed8 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	f241 3288 	movw	r2, #5000	; 0x1388
 800191a:	4293      	cmp	r3, r2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e0cb      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001922:	4b49      	ldr	r3, [pc, #292]	; (8001a48 <HAL_RCC_OscConfig+0x470>)
 8001924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0ee      	beq.n	800190c <HAL_RCC_OscConfig+0x334>
 800192e:	e014      	b.n	800195a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001930:	f7ff fad2 	bl	8000ed8 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001936:	e00a      	b.n	800194e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001938:	f7ff face 	bl	8000ed8 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	f241 3288 	movw	r2, #5000	; 0x1388
 8001946:	4293      	cmp	r3, r2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e0b5      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800194e:	4b3e      	ldr	r3, [pc, #248]	; (8001a48 <HAL_RCC_OscConfig+0x470>)
 8001950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1ee      	bne.n	8001938 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800195a:	7dfb      	ldrb	r3, [r7, #23]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d105      	bne.n	800196c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001960:	4b39      	ldr	r3, [pc, #228]	; (8001a48 <HAL_RCC_OscConfig+0x470>)
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	4a38      	ldr	r2, [pc, #224]	; (8001a48 <HAL_RCC_OscConfig+0x470>)
 8001966:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800196a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 80a1 	beq.w	8001ab8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001976:	4b34      	ldr	r3, [pc, #208]	; (8001a48 <HAL_RCC_OscConfig+0x470>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 030c 	and.w	r3, r3, #12
 800197e:	2b08      	cmp	r3, #8
 8001980:	d05c      	beq.n	8001a3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d141      	bne.n	8001a0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198a:	4b31      	ldr	r3, [pc, #196]	; (8001a50 <HAL_RCC_OscConfig+0x478>)
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001990:	f7ff faa2 	bl	8000ed8 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001998:	f7ff fa9e 	bl	8000ed8 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e087      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019aa:	4b27      	ldr	r3, [pc, #156]	; (8001a48 <HAL_RCC_OscConfig+0x470>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f0      	bne.n	8001998 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69da      	ldr	r2, [r3, #28]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a1b      	ldr	r3, [r3, #32]
 80019be:	431a      	orrs	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c4:	019b      	lsls	r3, r3, #6
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019cc:	085b      	lsrs	r3, r3, #1
 80019ce:	3b01      	subs	r3, #1
 80019d0:	041b      	lsls	r3, r3, #16
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d8:	061b      	lsls	r3, r3, #24
 80019da:	491b      	ldr	r1, [pc, #108]	; (8001a48 <HAL_RCC_OscConfig+0x470>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019e0:	4b1b      	ldr	r3, [pc, #108]	; (8001a50 <HAL_RCC_OscConfig+0x478>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e6:	f7ff fa77 	bl	8000ed8 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ee:	f7ff fa73 	bl	8000ed8 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e05c      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <HAL_RCC_OscConfig+0x470>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0f0      	beq.n	80019ee <HAL_RCC_OscConfig+0x416>
 8001a0c:	e054      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <HAL_RCC_OscConfig+0x478>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a14:	f7ff fa60 	bl	8000ed8 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a1c:	f7ff fa5c 	bl	8000ed8 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e045      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_RCC_OscConfig+0x470>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1f0      	bne.n	8001a1c <HAL_RCC_OscConfig+0x444>
 8001a3a:	e03d      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d107      	bne.n	8001a54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e038      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40007000 	.word	0x40007000
 8001a50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a54:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <HAL_RCC_OscConfig+0x4ec>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d028      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d121      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d11a      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a84:	4013      	ands	r3, r2
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d111      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9a:	085b      	lsrs	r3, r3, #1
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d107      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d001      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e000      	b.n	8001aba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40023800 	.word	0x40023800

08001ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0cc      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001adc:	4b68      	ldr	r3, [pc, #416]	; (8001c80 <HAL_RCC_ClockConfig+0x1b8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d90c      	bls.n	8001b04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aea:	4b65      	ldr	r3, [pc, #404]	; (8001c80 <HAL_RCC_ClockConfig+0x1b8>)
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af2:	4b63      	ldr	r3, [pc, #396]	; (8001c80 <HAL_RCC_ClockConfig+0x1b8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d001      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0b8      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d020      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b1c:	4b59      	ldr	r3, [pc, #356]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	4a58      	ldr	r2, [pc, #352]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b34:	4b53      	ldr	r3, [pc, #332]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	4a52      	ldr	r2, [pc, #328]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b40:	4b50      	ldr	r3, [pc, #320]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	494d      	ldr	r1, [pc, #308]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d044      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d107      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b66:	4b47      	ldr	r3, [pc, #284]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d119      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e07f      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d003      	beq.n	8001b86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	d107      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b86:	4b3f      	ldr	r3, [pc, #252]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d109      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e06f      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b96:	4b3b      	ldr	r3, [pc, #236]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e067      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ba6:	4b37      	ldr	r3, [pc, #220]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f023 0203 	bic.w	r2, r3, #3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	4934      	ldr	r1, [pc, #208]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bb8:	f7ff f98e 	bl	8000ed8 <HAL_GetTick>
 8001bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bbe:	e00a      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc0:	f7ff f98a 	bl	8000ed8 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e04f      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd6:	4b2b      	ldr	r3, [pc, #172]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 020c 	and.w	r2, r3, #12
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d1eb      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001be8:	4b25      	ldr	r3, [pc, #148]	; (8001c80 <HAL_RCC_ClockConfig+0x1b8>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d20c      	bcs.n	8001c10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf6:	4b22      	ldr	r3, [pc, #136]	; (8001c80 <HAL_RCC_ClockConfig+0x1b8>)
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfe:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <HAL_RCC_ClockConfig+0x1b8>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d001      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e032      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d008      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c1c:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	4916      	ldr	r1, [pc, #88]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d009      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c3a:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	490e      	ldr	r1, [pc, #56]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c4e:	f000 f821 	bl	8001c94 <HAL_RCC_GetSysClockFreq>
 8001c52:	4602      	mov	r2, r0
 8001c54:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	091b      	lsrs	r3, r3, #4
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	490a      	ldr	r1, [pc, #40]	; (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001c60:	5ccb      	ldrb	r3, [r1, r3]
 8001c62:	fa22 f303 	lsr.w	r3, r2, r3
 8001c66:	4a09      	ldr	r2, [pc, #36]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c6a:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <HAL_RCC_ClockConfig+0x1c8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff f8ee 	bl	8000e50 <HAL_InitTick>

  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023c00 	.word	0x40023c00
 8001c84:	40023800 	.word	0x40023800
 8001c88:	08004168 	.word	0x08004168
 8001c8c:	20000004 	.word	0x20000004
 8001c90:	20000008 	.word	0x20000008

08001c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c98:	b094      	sub	sp, #80	; 0x50
 8001c9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	647b      	str	r3, [r7, #68]	; 0x44
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cac:	4b79      	ldr	r3, [pc, #484]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 030c 	and.w	r3, r3, #12
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d00d      	beq.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x40>
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	f200 80e1 	bhi.w	8001e80 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d002      	beq.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x34>
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d003      	beq.n	8001cce <HAL_RCC_GetSysClockFreq+0x3a>
 8001cc6:	e0db      	b.n	8001e80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cc8:	4b73      	ldr	r3, [pc, #460]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001ccc:	e0db      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cce:	4b73      	ldr	r3, [pc, #460]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x208>)
 8001cd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cd2:	e0d8      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cd4:	4b6f      	ldr	r3, [pc, #444]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cdc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cde:	4b6d      	ldr	r3, [pc, #436]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d063      	beq.n	8001db2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cea:	4b6a      	ldr	r3, [pc, #424]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	099b      	lsrs	r3, r3, #6
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cf4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cfc:	633b      	str	r3, [r7, #48]	; 0x30
 8001cfe:	2300      	movs	r3, #0
 8001d00:	637b      	str	r3, [r7, #52]	; 0x34
 8001d02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d06:	4622      	mov	r2, r4
 8001d08:	462b      	mov	r3, r5
 8001d0a:	f04f 0000 	mov.w	r0, #0
 8001d0e:	f04f 0100 	mov.w	r1, #0
 8001d12:	0159      	lsls	r1, r3, #5
 8001d14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d18:	0150      	lsls	r0, r2, #5
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4621      	mov	r1, r4
 8001d20:	1a51      	subs	r1, r2, r1
 8001d22:	6139      	str	r1, [r7, #16]
 8001d24:	4629      	mov	r1, r5
 8001d26:	eb63 0301 	sbc.w	r3, r3, r1
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	f04f 0200 	mov.w	r2, #0
 8001d30:	f04f 0300 	mov.w	r3, #0
 8001d34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d38:	4659      	mov	r1, fp
 8001d3a:	018b      	lsls	r3, r1, #6
 8001d3c:	4651      	mov	r1, sl
 8001d3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d42:	4651      	mov	r1, sl
 8001d44:	018a      	lsls	r2, r1, #6
 8001d46:	4651      	mov	r1, sl
 8001d48:	ebb2 0801 	subs.w	r8, r2, r1
 8001d4c:	4659      	mov	r1, fp
 8001d4e:	eb63 0901 	sbc.w	r9, r3, r1
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	f04f 0300 	mov.w	r3, #0
 8001d5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d66:	4690      	mov	r8, r2
 8001d68:	4699      	mov	r9, r3
 8001d6a:	4623      	mov	r3, r4
 8001d6c:	eb18 0303 	adds.w	r3, r8, r3
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	462b      	mov	r3, r5
 8001d74:	eb49 0303 	adc.w	r3, r9, r3
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	f04f 0300 	mov.w	r3, #0
 8001d82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d86:	4629      	mov	r1, r5
 8001d88:	024b      	lsls	r3, r1, #9
 8001d8a:	4621      	mov	r1, r4
 8001d8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d90:	4621      	mov	r1, r4
 8001d92:	024a      	lsls	r2, r1, #9
 8001d94:	4610      	mov	r0, r2
 8001d96:	4619      	mov	r1, r3
 8001d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001da0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001da4:	f7fe fa74 	bl	8000290 <__aeabi_uldivmod>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4613      	mov	r3, r2
 8001dae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001db0:	e058      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001db2:	4b38      	ldr	r3, [pc, #224]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	099b      	lsrs	r3, r3, #6
 8001db8:	2200      	movs	r2, #0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	4611      	mov	r1, r2
 8001dbe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001dc2:	623b      	str	r3, [r7, #32]
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001dcc:	4642      	mov	r2, r8
 8001dce:	464b      	mov	r3, r9
 8001dd0:	f04f 0000 	mov.w	r0, #0
 8001dd4:	f04f 0100 	mov.w	r1, #0
 8001dd8:	0159      	lsls	r1, r3, #5
 8001dda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dde:	0150      	lsls	r0, r2, #5
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4641      	mov	r1, r8
 8001de6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dea:	4649      	mov	r1, r9
 8001dec:	eb63 0b01 	sbc.w	fp, r3, r1
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	f04f 0300 	mov.w	r3, #0
 8001df8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001dfc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e04:	ebb2 040a 	subs.w	r4, r2, sl
 8001e08:	eb63 050b 	sbc.w	r5, r3, fp
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	f04f 0300 	mov.w	r3, #0
 8001e14:	00eb      	lsls	r3, r5, #3
 8001e16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e1a:	00e2      	lsls	r2, r4, #3
 8001e1c:	4614      	mov	r4, r2
 8001e1e:	461d      	mov	r5, r3
 8001e20:	4643      	mov	r3, r8
 8001e22:	18e3      	adds	r3, r4, r3
 8001e24:	603b      	str	r3, [r7, #0]
 8001e26:	464b      	mov	r3, r9
 8001e28:	eb45 0303 	adc.w	r3, r5, r3
 8001e2c:	607b      	str	r3, [r7, #4]
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	f04f 0300 	mov.w	r3, #0
 8001e36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e3a:	4629      	mov	r1, r5
 8001e3c:	028b      	lsls	r3, r1, #10
 8001e3e:	4621      	mov	r1, r4
 8001e40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e44:	4621      	mov	r1, r4
 8001e46:	028a      	lsls	r2, r1, #10
 8001e48:	4610      	mov	r0, r2
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e4e:	2200      	movs	r2, #0
 8001e50:	61bb      	str	r3, [r7, #24]
 8001e52:	61fa      	str	r2, [r7, #28]
 8001e54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e58:	f7fe fa1a 	bl	8000290 <__aeabi_uldivmod>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4613      	mov	r3, r2
 8001e62:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e64:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	0c1b      	lsrs	r3, r3, #16
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	3301      	adds	r3, #1
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001e74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e7e:	e002      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3750      	adds	r7, #80	; 0x50
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e92:	bf00      	nop
 8001e94:	40023800 	.word	0x40023800
 8001e98:	00f42400 	.word	0x00f42400
 8001e9c:	007a1200 	.word	0x007a1200

08001ea0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ea4:	4b03      	ldr	r3, [pc, #12]	; (8001eb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	20000004 	.word	0x20000004

08001eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ebc:	f7ff fff0 	bl	8001ea0 <HAL_RCC_GetHCLKFreq>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	0a9b      	lsrs	r3, r3, #10
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	4903      	ldr	r1, [pc, #12]	; (8001edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ece:	5ccb      	ldrb	r3, [r1, r3]
 8001ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	08004178 	.word	0x08004178

08001ee0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ee4:	f7ff ffdc 	bl	8001ea0 <HAL_RCC_GetHCLKFreq>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	0b5b      	lsrs	r3, r3, #13
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	4903      	ldr	r1, [pc, #12]	; (8001f04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ef6:	5ccb      	ldrb	r3, [r1, r3]
 8001ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40023800 	.word	0x40023800
 8001f04:	08004178 	.word	0x08004178

08001f08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e03f      	b.n	8001f9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d106      	bne.n	8001f34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7fe fe6e 	bl	8000c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2224      	movs	r2, #36	; 0x24
 8001f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 fd23 	bl	8002998 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	691a      	ldr	r2, [r3, #16]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	695a      	ldr	r2, [r3, #20]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68da      	ldr	r2, [r3, #12]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2220      	movs	r2, #32
 8001f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b085      	sub	sp, #20
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	60f8      	str	r0, [r7, #12]
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	4613      	mov	r3, r2
 8001fae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b20      	cmp	r3, #32
 8001fba:	d130      	bne.n	800201e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d002      	beq.n	8001fc8 <HAL_UART_Transmit_IT+0x26>
 8001fc2:	88fb      	ldrh	r3, [r7, #6]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e029      	b.n	8002020 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d101      	bne.n	8001fda <HAL_UART_Transmit_IT+0x38>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e022      	b.n	8002020 <HAL_UART_Transmit_IT+0x7e>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	88fa      	ldrh	r2, [r7, #6]
 8001fec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	88fa      	ldrh	r2, [r7, #6]
 8001ff2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2221      	movs	r2, #33	; 0x21
 8001ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002018:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800201a:	2300      	movs	r3, #0
 800201c:	e000      	b.n	8002020 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800201e:	2302      	movs	r3, #2
  }
}
 8002020:	4618      	mov	r0, r3
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	4613      	mov	r3, r2
 8002038:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b20      	cmp	r3, #32
 8002044:	d11d      	bne.n	8002082 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d002      	beq.n	8002052 <HAL_UART_Receive_IT+0x26>
 800204c:	88fb      	ldrh	r3, [r7, #6]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e016      	b.n	8002084 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800205c:	2b01      	cmp	r3, #1
 800205e:	d101      	bne.n	8002064 <HAL_UART_Receive_IT+0x38>
 8002060:	2302      	movs	r3, #2
 8002062:	e00f      	b.n	8002084 <HAL_UART_Receive_IT+0x58>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002072:	88fb      	ldrh	r3, [r7, #6]
 8002074:	461a      	mov	r2, r3
 8002076:	68b9      	ldr	r1, [r7, #8]
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f000 fab5 	bl	80025e8 <UART_Start_Receive_IT>
 800207e:	4603      	mov	r3, r0
 8002080:	e000      	b.n	8002084 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002082:	2302      	movs	r3, #2
  }
}
 8002084:	4618      	mov	r0, r3
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b0ba      	sub	sp, #232	; 0xe8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80020be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80020ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10f      	bne.n	80020f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020d6:	f003 0320 	and.w	r3, r3, #32
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d009      	beq.n	80020f2 <HAL_UART_IRQHandler+0x66>
 80020de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020e2:	f003 0320 	and.w	r3, r3, #32
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 fb99 	bl	8002822 <UART_Receive_IT>
      return;
 80020f0:	e256      	b.n	80025a0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80020f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 80de 	beq.w	80022b8 <HAL_UART_IRQHandler+0x22c>
 80020fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b00      	cmp	r3, #0
 8002106:	d106      	bne.n	8002116 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800210c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 80d1 	beq.w	80022b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00b      	beq.n	800213a <HAL_UART_IRQHandler+0xae>
 8002122:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212a:	2b00      	cmp	r3, #0
 800212c:	d005      	beq.n	800213a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f043 0201 	orr.w	r2, r3, #1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800213a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00b      	beq.n	800215e <HAL_UART_IRQHandler+0xd2>
 8002146:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d005      	beq.n	800215e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	f043 0202 	orr.w	r2, r3, #2
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800215e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00b      	beq.n	8002182 <HAL_UART_IRQHandler+0xf6>
 800216a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d005      	beq.n	8002182 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f043 0204 	orr.w	r2, r3, #4
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b00      	cmp	r3, #0
 800218c:	d011      	beq.n	80021b2 <HAL_UART_IRQHandler+0x126>
 800218e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002192:	f003 0320 	and.w	r3, r3, #32
 8002196:	2b00      	cmp	r3, #0
 8002198:	d105      	bne.n	80021a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800219a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d005      	beq.n	80021b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f043 0208 	orr.w	r2, r3, #8
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 81ed 	beq.w	8002596 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021c0:	f003 0320 	and.w	r3, r3, #32
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d008      	beq.n	80021da <HAL_UART_IRQHandler+0x14e>
 80021c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021cc:	f003 0320 	and.w	r3, r3, #32
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d002      	beq.n	80021da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 fb24 	bl	8002822 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e4:	2b40      	cmp	r3, #64	; 0x40
 80021e6:	bf0c      	ite	eq
 80021e8:	2301      	moveq	r3, #1
 80021ea:	2300      	movne	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d103      	bne.n	8002206 <HAL_UART_IRQHandler+0x17a>
 80021fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002202:	2b00      	cmp	r3, #0
 8002204:	d04f      	beq.n	80022a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 fa2c 	bl	8002664 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002216:	2b40      	cmp	r3, #64	; 0x40
 8002218:	d141      	bne.n	800229e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	3314      	adds	r3, #20
 8002220:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002224:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002228:	e853 3f00 	ldrex	r3, [r3]
 800222c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002230:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002238:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	3314      	adds	r3, #20
 8002242:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002246:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800224a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800224e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002252:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002256:	e841 2300 	strex	r3, r2, [r1]
 800225a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800225e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1d9      	bne.n	800221a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226a:	2b00      	cmp	r3, #0
 800226c:	d013      	beq.n	8002296 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002272:	4a7d      	ldr	r2, [pc, #500]	; (8002468 <HAL_UART_IRQHandler+0x3dc>)
 8002274:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe ffb9 	bl	80011f2 <HAL_DMA_Abort_IT>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d016      	beq.n	80022b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800228a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002290:	4610      	mov	r0, r2
 8002292:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002294:	e00e      	b.n	80022b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f990 	bl	80025bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800229c:	e00a      	b.n	80022b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f98c 	bl	80025bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022a4:	e006      	b.n	80022b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f988 	bl	80025bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80022b2:	e170      	b.n	8002596 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022b4:	bf00      	nop
    return;
 80022b6:	e16e      	b.n	8002596 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022bc:	2b01      	cmp	r3, #1
 80022be:	f040 814a 	bne.w	8002556 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80022c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022c6:	f003 0310 	and.w	r3, r3, #16
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 8143 	beq.w	8002556 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80022d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022d4:	f003 0310 	and.w	r3, r3, #16
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 813c 	beq.w	8002556 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80022de:	2300      	movs	r3, #0
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022fe:	2b40      	cmp	r3, #64	; 0x40
 8002300:	f040 80b4 	bne.w	800246c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002310:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 8140 	beq.w	800259a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800231e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002322:	429a      	cmp	r2, r3
 8002324:	f080 8139 	bcs.w	800259a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800232e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800233a:	f000 8088 	beq.w	800244e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	330c      	adds	r3, #12
 8002344:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002348:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800234c:	e853 3f00 	ldrex	r3, [r3]
 8002350:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002354:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800235c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	330c      	adds	r3, #12
 8002366:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800236a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800236e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002372:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002376:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800237a:	e841 2300 	strex	r3, r2, [r1]
 800237e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002382:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1d9      	bne.n	800233e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	3314      	adds	r3, #20
 8002390:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002392:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002394:	e853 3f00 	ldrex	r3, [r3]
 8002398:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800239a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800239c:	f023 0301 	bic.w	r3, r3, #1
 80023a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	3314      	adds	r3, #20
 80023aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80023ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80023b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80023b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80023ba:	e841 2300 	strex	r3, r2, [r1]
 80023be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80023c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1e1      	bne.n	800238a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	3314      	adds	r3, #20
 80023cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023d0:	e853 3f00 	ldrex	r3, [r3]
 80023d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80023d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	3314      	adds	r3, #20
 80023e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80023ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80023ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80023f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80023f2:	e841 2300 	strex	r3, r2, [r1]
 80023f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80023f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1e3      	bne.n	80023c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2220      	movs	r2, #32
 8002402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	330c      	adds	r3, #12
 8002412:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002416:	e853 3f00 	ldrex	r3, [r3]
 800241a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800241c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800241e:	f023 0310 	bic.w	r3, r3, #16
 8002422:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	330c      	adds	r3, #12
 800242c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002430:	65ba      	str	r2, [r7, #88]	; 0x58
 8002432:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002434:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002436:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002438:	e841 2300 	strex	r3, r2, [r1]
 800243c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800243e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1e3      	bne.n	800240c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002448:	4618      	mov	r0, r3
 800244a:	f7fe fe62 	bl	8001112 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002456:	b29b      	uxth	r3, r3
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	b29b      	uxth	r3, r3
 800245c:	4619      	mov	r1, r3
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f8b6 	bl	80025d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002464:	e099      	b.n	800259a <HAL_UART_IRQHandler+0x50e>
 8002466:	bf00      	nop
 8002468:	0800272b 	.word	0x0800272b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002474:	b29b      	uxth	r3, r3
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002480:	b29b      	uxth	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 808b 	beq.w	800259e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002488:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 8086 	beq.w	800259e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	330c      	adds	r3, #12
 8002498:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800249a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800249c:	e853 3f00 	ldrex	r3, [r3]
 80024a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80024a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80024a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	330c      	adds	r3, #12
 80024b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80024b6:	647a      	str	r2, [r7, #68]	; 0x44
 80024b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80024bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80024be:	e841 2300 	strex	r3, r2, [r1]
 80024c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80024c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1e3      	bne.n	8002492 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	3314      	adds	r3, #20
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	e853 3f00 	ldrex	r3, [r3]
 80024d8:	623b      	str	r3, [r7, #32]
   return(result);
 80024da:	6a3b      	ldr	r3, [r7, #32]
 80024dc:	f023 0301 	bic.w	r3, r3, #1
 80024e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	3314      	adds	r3, #20
 80024ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80024ee:	633a      	str	r2, [r7, #48]	; 0x30
 80024f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024f6:	e841 2300 	strex	r3, r2, [r1]
 80024fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80024fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1e3      	bne.n	80024ca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2220      	movs	r2, #32
 8002506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	330c      	adds	r3, #12
 8002516:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	e853 3f00 	ldrex	r3, [r3]
 800251e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f023 0310 	bic.w	r3, r3, #16
 8002526:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	330c      	adds	r3, #12
 8002530:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002534:	61fa      	str	r2, [r7, #28]
 8002536:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002538:	69b9      	ldr	r1, [r7, #24]
 800253a:	69fa      	ldr	r2, [r7, #28]
 800253c:	e841 2300 	strex	r3, r2, [r1]
 8002540:	617b      	str	r3, [r7, #20]
   return(result);
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1e3      	bne.n	8002510 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002548:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800254c:	4619      	mov	r1, r3
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f83e 	bl	80025d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002554:	e023      	b.n	800259e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800255a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255e:	2b00      	cmp	r3, #0
 8002560:	d009      	beq.n	8002576 <HAL_UART_IRQHandler+0x4ea>
 8002562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f8ef 	bl	8002752 <UART_Transmit_IT>
    return;
 8002574:	e014      	b.n	80025a0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800257a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00e      	beq.n	80025a0 <HAL_UART_IRQHandler+0x514>
 8002582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800258a:	2b00      	cmp	r3, #0
 800258c:	d008      	beq.n	80025a0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f92f 	bl	80027f2 <UART_EndTransmit_IT>
    return;
 8002594:	e004      	b.n	80025a0 <HAL_UART_IRQHandler+0x514>
    return;
 8002596:	bf00      	nop
 8002598:	e002      	b.n	80025a0 <HAL_UART_IRQHandler+0x514>
      return;
 800259a:	bf00      	nop
 800259c:	e000      	b.n	80025a0 <HAL_UART_IRQHandler+0x514>
      return;
 800259e:	bf00      	nop
  }
}
 80025a0:	37e8      	adds	r7, #232	; 0xe8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop

080025a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	460b      	mov	r3, r1
 80025da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	4613      	mov	r3, r2
 80025f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	68ba      	ldr	r2, [r7, #8]
 80025fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	88fa      	ldrh	r2, [r7, #6]
 8002600:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	88fa      	ldrh	r2, [r7, #6]
 8002606:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2222      	movs	r2, #34	; 0x22
 8002612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d007      	beq.n	8002636 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68da      	ldr	r2, [r3, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002634:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	695a      	ldr	r2, [r3, #20]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f042 0201 	orr.w	r2, r2, #1
 8002644:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68da      	ldr	r2, [r3, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f042 0220 	orr.w	r2, r2, #32
 8002654:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3714      	adds	r7, #20
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002664:	b480      	push	{r7}
 8002666:	b095      	sub	sp, #84	; 0x54
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	330c      	adds	r3, #12
 8002672:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002676:	e853 3f00 	ldrex	r3, [r3]
 800267a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800267c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002682:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	330c      	adds	r3, #12
 800268a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800268c:	643a      	str	r2, [r7, #64]	; 0x40
 800268e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002690:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002692:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002694:	e841 2300 	strex	r3, r2, [r1]
 8002698:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800269a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1e5      	bne.n	800266c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	3314      	adds	r3, #20
 80026a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026a8:	6a3b      	ldr	r3, [r7, #32]
 80026aa:	e853 3f00 	ldrex	r3, [r3]
 80026ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f023 0301 	bic.w	r3, r3, #1
 80026b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	3314      	adds	r3, #20
 80026be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026c8:	e841 2300 	strex	r3, r2, [r1]
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1e5      	bne.n	80026a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d119      	bne.n	8002710 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	330c      	adds	r3, #12
 80026e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	e853 3f00 	ldrex	r3, [r3]
 80026ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	f023 0310 	bic.w	r3, r3, #16
 80026f2:	647b      	str	r3, [r7, #68]	; 0x44
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	330c      	adds	r3, #12
 80026fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026fc:	61ba      	str	r2, [r7, #24]
 80026fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002700:	6979      	ldr	r1, [r7, #20]
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	e841 2300 	strex	r3, r2, [r1]
 8002708:	613b      	str	r3, [r7, #16]
   return(result);
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1e5      	bne.n	80026dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2220      	movs	r2, #32
 8002714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800271e:	bf00      	nop
 8002720:	3754      	adds	r7, #84	; 0x54
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b084      	sub	sp, #16
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002736:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f7ff ff39 	bl	80025bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800274a:	bf00      	nop
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002752:	b480      	push	{r7}
 8002754:	b085      	sub	sp, #20
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b21      	cmp	r3, #33	; 0x21
 8002764:	d13e      	bne.n	80027e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800276e:	d114      	bne.n	800279a <UART_Transmit_IT+0x48>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d110      	bne.n	800279a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	461a      	mov	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800278c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	1c9a      	adds	r2, r3, #2
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	621a      	str	r2, [r3, #32]
 8002798:	e008      	b.n	80027ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	1c59      	adds	r1, r3, #1
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6211      	str	r1, [r2, #32]
 80027a4:	781a      	ldrb	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	3b01      	subs	r3, #1
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	4619      	mov	r1, r3
 80027ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10f      	bne.n	80027e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68da      	ldr	r2, [r3, #12]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80027e0:	2300      	movs	r3, #0
 80027e2:	e000      	b.n	80027e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80027e4:	2302      	movs	r3, #2
  }
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b082      	sub	sp, #8
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002808:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2220      	movs	r2, #32
 800280e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7ff fec8 	bl	80025a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b08c      	sub	sp, #48	; 0x30
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b22      	cmp	r3, #34	; 0x22
 8002834:	f040 80ab 	bne.w	800298e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002840:	d117      	bne.n	8002872 <UART_Receive_IT+0x50>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d113      	bne.n	8002872 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800284a:	2300      	movs	r3, #0
 800284c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002852:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	b29b      	uxth	r3, r3
 800285c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002860:	b29a      	uxth	r2, r3
 8002862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002864:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286a:	1c9a      	adds	r2, r3, #2
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	629a      	str	r2, [r3, #40]	; 0x28
 8002870:	e026      	b.n	80028c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002876:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002878:	2300      	movs	r3, #0
 800287a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002884:	d007      	beq.n	8002896 <UART_Receive_IT+0x74>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10a      	bne.n	80028a4 <UART_Receive_IT+0x82>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d106      	bne.n	80028a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	b2da      	uxtb	r2, r3
 800289e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a0:	701a      	strb	r2, [r3, #0]
 80028a2:	e008      	b.n	80028b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ba:	1c5a      	adds	r2, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	3b01      	subs	r3, #1
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	4619      	mov	r1, r3
 80028ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d15a      	bne.n	800298a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0220 	bic.w	r2, r2, #32
 80028e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	695a      	ldr	r2, [r3, #20]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0201 	bic.w	r2, r2, #1
 8002902:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2220      	movs	r2, #32
 8002908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	2b01      	cmp	r3, #1
 8002912:	d135      	bne.n	8002980 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	330c      	adds	r3, #12
 8002920:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	e853 3f00 	ldrex	r3, [r3]
 8002928:	613b      	str	r3, [r7, #16]
   return(result);
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	f023 0310 	bic.w	r3, r3, #16
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	330c      	adds	r3, #12
 8002938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800293a:	623a      	str	r2, [r7, #32]
 800293c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800293e:	69f9      	ldr	r1, [r7, #28]
 8002940:	6a3a      	ldr	r2, [r7, #32]
 8002942:	e841 2300 	strex	r3, r2, [r1]
 8002946:	61bb      	str	r3, [r7, #24]
   return(result);
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1e5      	bne.n	800291a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0310 	and.w	r3, r3, #16
 8002958:	2b10      	cmp	r3, #16
 800295a:	d10a      	bne.n	8002972 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800295c:	2300      	movs	r3, #0
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002976:	4619      	mov	r1, r3
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7ff fe29 	bl	80025d0 <HAL_UARTEx_RxEventCallback>
 800297e:	e002      	b.n	8002986 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f7fd ff6f 	bl	8000864 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002986:	2300      	movs	r3, #0
 8002988:	e002      	b.n	8002990 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800298a:	2300      	movs	r3, #0
 800298c:	e000      	b.n	8002990 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800298e:	2302      	movs	r3, #2
  }
}
 8002990:	4618      	mov	r0, r3
 8002992:	3730      	adds	r7, #48	; 0x30
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800299c:	b0c0      	sub	sp, #256	; 0x100
 800299e:	af00      	add	r7, sp, #0
 80029a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80029b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b4:	68d9      	ldr	r1, [r3, #12]
 80029b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	ea40 0301 	orr.w	r3, r0, r1
 80029c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	431a      	orrs	r2, r3
 80029d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	431a      	orrs	r2, r3
 80029d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80029e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80029f0:	f021 010c 	bic.w	r1, r1, #12
 80029f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80029fe:	430b      	orrs	r3, r1
 8002a00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a12:	6999      	ldr	r1, [r3, #24]
 8002a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	ea40 0301 	orr.w	r3, r0, r1
 8002a1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	4b8f      	ldr	r3, [pc, #572]	; (8002c64 <UART_SetConfig+0x2cc>)
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d005      	beq.n	8002a38 <UART_SetConfig+0xa0>
 8002a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	4b8d      	ldr	r3, [pc, #564]	; (8002c68 <UART_SetConfig+0x2d0>)
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d104      	bne.n	8002a42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a38:	f7ff fa52 	bl	8001ee0 <HAL_RCC_GetPCLK2Freq>
 8002a3c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002a40:	e003      	b.n	8002a4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a42:	f7ff fa39 	bl	8001eb8 <HAL_RCC_GetPCLK1Freq>
 8002a46:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a54:	f040 810c 	bne.w	8002c70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a62:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002a6a:	4622      	mov	r2, r4
 8002a6c:	462b      	mov	r3, r5
 8002a6e:	1891      	adds	r1, r2, r2
 8002a70:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a72:	415b      	adcs	r3, r3
 8002a74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a7a:	4621      	mov	r1, r4
 8002a7c:	eb12 0801 	adds.w	r8, r2, r1
 8002a80:	4629      	mov	r1, r5
 8002a82:	eb43 0901 	adc.w	r9, r3, r1
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	f04f 0300 	mov.w	r3, #0
 8002a8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a9a:	4690      	mov	r8, r2
 8002a9c:	4699      	mov	r9, r3
 8002a9e:	4623      	mov	r3, r4
 8002aa0:	eb18 0303 	adds.w	r3, r8, r3
 8002aa4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002aa8:	462b      	mov	r3, r5
 8002aaa:	eb49 0303 	adc.w	r3, r9, r3
 8002aae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002abe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002ac2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	18db      	adds	r3, r3, r3
 8002aca:	653b      	str	r3, [r7, #80]	; 0x50
 8002acc:	4613      	mov	r3, r2
 8002ace:	eb42 0303 	adc.w	r3, r2, r3
 8002ad2:	657b      	str	r3, [r7, #84]	; 0x54
 8002ad4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ad8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002adc:	f7fd fbd8 	bl	8000290 <__aeabi_uldivmod>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4b61      	ldr	r3, [pc, #388]	; (8002c6c <UART_SetConfig+0x2d4>)
 8002ae6:	fba3 2302 	umull	r2, r3, r3, r2
 8002aea:	095b      	lsrs	r3, r3, #5
 8002aec:	011c      	lsls	r4, r3, #4
 8002aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002af2:	2200      	movs	r2, #0
 8002af4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002af8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002afc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002b00:	4642      	mov	r2, r8
 8002b02:	464b      	mov	r3, r9
 8002b04:	1891      	adds	r1, r2, r2
 8002b06:	64b9      	str	r1, [r7, #72]	; 0x48
 8002b08:	415b      	adcs	r3, r3
 8002b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b10:	4641      	mov	r1, r8
 8002b12:	eb12 0a01 	adds.w	sl, r2, r1
 8002b16:	4649      	mov	r1, r9
 8002b18:	eb43 0b01 	adc.w	fp, r3, r1
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b30:	4692      	mov	sl, r2
 8002b32:	469b      	mov	fp, r3
 8002b34:	4643      	mov	r3, r8
 8002b36:	eb1a 0303 	adds.w	r3, sl, r3
 8002b3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b3e:	464b      	mov	r3, r9
 8002b40:	eb4b 0303 	adc.w	r3, fp, r3
 8002b44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b54:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	18db      	adds	r3, r3, r3
 8002b60:	643b      	str	r3, [r7, #64]	; 0x40
 8002b62:	4613      	mov	r3, r2
 8002b64:	eb42 0303 	adc.w	r3, r2, r3
 8002b68:	647b      	str	r3, [r7, #68]	; 0x44
 8002b6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002b72:	f7fd fb8d 	bl	8000290 <__aeabi_uldivmod>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	4b3b      	ldr	r3, [pc, #236]	; (8002c6c <UART_SetConfig+0x2d4>)
 8002b7e:	fba3 2301 	umull	r2, r3, r3, r1
 8002b82:	095b      	lsrs	r3, r3, #5
 8002b84:	2264      	movs	r2, #100	; 0x64
 8002b86:	fb02 f303 	mul.w	r3, r2, r3
 8002b8a:	1acb      	subs	r3, r1, r3
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002b92:	4b36      	ldr	r3, [pc, #216]	; (8002c6c <UART_SetConfig+0x2d4>)
 8002b94:	fba3 2302 	umull	r2, r3, r3, r2
 8002b98:	095b      	lsrs	r3, r3, #5
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ba0:	441c      	add	r4, r3
 8002ba2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002bac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002bb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002bb4:	4642      	mov	r2, r8
 8002bb6:	464b      	mov	r3, r9
 8002bb8:	1891      	adds	r1, r2, r2
 8002bba:	63b9      	str	r1, [r7, #56]	; 0x38
 8002bbc:	415b      	adcs	r3, r3
 8002bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002bc4:	4641      	mov	r1, r8
 8002bc6:	1851      	adds	r1, r2, r1
 8002bc8:	6339      	str	r1, [r7, #48]	; 0x30
 8002bca:	4649      	mov	r1, r9
 8002bcc:	414b      	adcs	r3, r1
 8002bce:	637b      	str	r3, [r7, #52]	; 0x34
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	f04f 0300 	mov.w	r3, #0
 8002bd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002bdc:	4659      	mov	r1, fp
 8002bde:	00cb      	lsls	r3, r1, #3
 8002be0:	4651      	mov	r1, sl
 8002be2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002be6:	4651      	mov	r1, sl
 8002be8:	00ca      	lsls	r2, r1, #3
 8002bea:	4610      	mov	r0, r2
 8002bec:	4619      	mov	r1, r3
 8002bee:	4603      	mov	r3, r0
 8002bf0:	4642      	mov	r2, r8
 8002bf2:	189b      	adds	r3, r3, r2
 8002bf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bf8:	464b      	mov	r3, r9
 8002bfa:	460a      	mov	r2, r1
 8002bfc:	eb42 0303 	adc.w	r3, r2, r3
 8002c00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002c10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002c14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002c18:	460b      	mov	r3, r1
 8002c1a:	18db      	adds	r3, r3, r3
 8002c1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c1e:	4613      	mov	r3, r2
 8002c20:	eb42 0303 	adc.w	r3, r2, r3
 8002c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002c2e:	f7fd fb2f 	bl	8000290 <__aeabi_uldivmod>
 8002c32:	4602      	mov	r2, r0
 8002c34:	460b      	mov	r3, r1
 8002c36:	4b0d      	ldr	r3, [pc, #52]	; (8002c6c <UART_SetConfig+0x2d4>)
 8002c38:	fba3 1302 	umull	r1, r3, r3, r2
 8002c3c:	095b      	lsrs	r3, r3, #5
 8002c3e:	2164      	movs	r1, #100	; 0x64
 8002c40:	fb01 f303 	mul.w	r3, r1, r3
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	3332      	adds	r3, #50	; 0x32
 8002c4a:	4a08      	ldr	r2, [pc, #32]	; (8002c6c <UART_SetConfig+0x2d4>)
 8002c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c50:	095b      	lsrs	r3, r3, #5
 8002c52:	f003 0207 	and.w	r2, r3, #7
 8002c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4422      	add	r2, r4
 8002c5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c60:	e105      	b.n	8002e6e <UART_SetConfig+0x4d6>
 8002c62:	bf00      	nop
 8002c64:	40011000 	.word	0x40011000
 8002c68:	40011400 	.word	0x40011400
 8002c6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c74:	2200      	movs	r2, #0
 8002c76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002c82:	4642      	mov	r2, r8
 8002c84:	464b      	mov	r3, r9
 8002c86:	1891      	adds	r1, r2, r2
 8002c88:	6239      	str	r1, [r7, #32]
 8002c8a:	415b      	adcs	r3, r3
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c92:	4641      	mov	r1, r8
 8002c94:	1854      	adds	r4, r2, r1
 8002c96:	4649      	mov	r1, r9
 8002c98:	eb43 0501 	adc.w	r5, r3, r1
 8002c9c:	f04f 0200 	mov.w	r2, #0
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	00eb      	lsls	r3, r5, #3
 8002ca6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002caa:	00e2      	lsls	r2, r4, #3
 8002cac:	4614      	mov	r4, r2
 8002cae:	461d      	mov	r5, r3
 8002cb0:	4643      	mov	r3, r8
 8002cb2:	18e3      	adds	r3, r4, r3
 8002cb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002cb8:	464b      	mov	r3, r9
 8002cba:	eb45 0303 	adc.w	r3, r5, r3
 8002cbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002cce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	f04f 0300 	mov.w	r3, #0
 8002cda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002cde:	4629      	mov	r1, r5
 8002ce0:	008b      	lsls	r3, r1, #2
 8002ce2:	4621      	mov	r1, r4
 8002ce4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ce8:	4621      	mov	r1, r4
 8002cea:	008a      	lsls	r2, r1, #2
 8002cec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002cf0:	f7fd face 	bl	8000290 <__aeabi_uldivmod>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4b60      	ldr	r3, [pc, #384]	; (8002e7c <UART_SetConfig+0x4e4>)
 8002cfa:	fba3 2302 	umull	r2, r3, r3, r2
 8002cfe:	095b      	lsrs	r3, r3, #5
 8002d00:	011c      	lsls	r4, r3, #4
 8002d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d06:	2200      	movs	r2, #0
 8002d08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002d14:	4642      	mov	r2, r8
 8002d16:	464b      	mov	r3, r9
 8002d18:	1891      	adds	r1, r2, r2
 8002d1a:	61b9      	str	r1, [r7, #24]
 8002d1c:	415b      	adcs	r3, r3
 8002d1e:	61fb      	str	r3, [r7, #28]
 8002d20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d24:	4641      	mov	r1, r8
 8002d26:	1851      	adds	r1, r2, r1
 8002d28:	6139      	str	r1, [r7, #16]
 8002d2a:	4649      	mov	r1, r9
 8002d2c:	414b      	adcs	r3, r1
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	f04f 0200 	mov.w	r2, #0
 8002d34:	f04f 0300 	mov.w	r3, #0
 8002d38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d3c:	4659      	mov	r1, fp
 8002d3e:	00cb      	lsls	r3, r1, #3
 8002d40:	4651      	mov	r1, sl
 8002d42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d46:	4651      	mov	r1, sl
 8002d48:	00ca      	lsls	r2, r1, #3
 8002d4a:	4610      	mov	r0, r2
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4603      	mov	r3, r0
 8002d50:	4642      	mov	r2, r8
 8002d52:	189b      	adds	r3, r3, r2
 8002d54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d58:	464b      	mov	r3, r9
 8002d5a:	460a      	mov	r2, r1
 8002d5c:	eb42 0303 	adc.w	r3, r2, r3
 8002d60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002d7c:	4649      	mov	r1, r9
 8002d7e:	008b      	lsls	r3, r1, #2
 8002d80:	4641      	mov	r1, r8
 8002d82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d86:	4641      	mov	r1, r8
 8002d88:	008a      	lsls	r2, r1, #2
 8002d8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002d8e:	f7fd fa7f 	bl	8000290 <__aeabi_uldivmod>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	4b39      	ldr	r3, [pc, #228]	; (8002e7c <UART_SetConfig+0x4e4>)
 8002d98:	fba3 1302 	umull	r1, r3, r3, r2
 8002d9c:	095b      	lsrs	r3, r3, #5
 8002d9e:	2164      	movs	r1, #100	; 0x64
 8002da0:	fb01 f303 	mul.w	r3, r1, r3
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	3332      	adds	r3, #50	; 0x32
 8002daa:	4a34      	ldr	r2, [pc, #208]	; (8002e7c <UART_SetConfig+0x4e4>)
 8002dac:	fba2 2303 	umull	r2, r3, r2, r3
 8002db0:	095b      	lsrs	r3, r3, #5
 8002db2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002db6:	441c      	add	r4, r3
 8002db8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	673b      	str	r3, [r7, #112]	; 0x70
 8002dc0:	677a      	str	r2, [r7, #116]	; 0x74
 8002dc2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002dc6:	4642      	mov	r2, r8
 8002dc8:	464b      	mov	r3, r9
 8002dca:	1891      	adds	r1, r2, r2
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	415b      	adcs	r3, r3
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dd6:	4641      	mov	r1, r8
 8002dd8:	1851      	adds	r1, r2, r1
 8002dda:	6039      	str	r1, [r7, #0]
 8002ddc:	4649      	mov	r1, r9
 8002dde:	414b      	adcs	r3, r1
 8002de0:	607b      	str	r3, [r7, #4]
 8002de2:	f04f 0200 	mov.w	r2, #0
 8002de6:	f04f 0300 	mov.w	r3, #0
 8002dea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002dee:	4659      	mov	r1, fp
 8002df0:	00cb      	lsls	r3, r1, #3
 8002df2:	4651      	mov	r1, sl
 8002df4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002df8:	4651      	mov	r1, sl
 8002dfa:	00ca      	lsls	r2, r1, #3
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4603      	mov	r3, r0
 8002e02:	4642      	mov	r2, r8
 8002e04:	189b      	adds	r3, r3, r2
 8002e06:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e08:	464b      	mov	r3, r9
 8002e0a:	460a      	mov	r2, r1
 8002e0c:	eb42 0303 	adc.w	r3, r2, r3
 8002e10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	663b      	str	r3, [r7, #96]	; 0x60
 8002e1c:	667a      	str	r2, [r7, #100]	; 0x64
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	f04f 0300 	mov.w	r3, #0
 8002e26:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002e2a:	4649      	mov	r1, r9
 8002e2c:	008b      	lsls	r3, r1, #2
 8002e2e:	4641      	mov	r1, r8
 8002e30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e34:	4641      	mov	r1, r8
 8002e36:	008a      	lsls	r2, r1, #2
 8002e38:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002e3c:	f7fd fa28 	bl	8000290 <__aeabi_uldivmod>
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	4b0d      	ldr	r3, [pc, #52]	; (8002e7c <UART_SetConfig+0x4e4>)
 8002e46:	fba3 1302 	umull	r1, r3, r3, r2
 8002e4a:	095b      	lsrs	r3, r3, #5
 8002e4c:	2164      	movs	r1, #100	; 0x64
 8002e4e:	fb01 f303 	mul.w	r3, r1, r3
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	011b      	lsls	r3, r3, #4
 8002e56:	3332      	adds	r3, #50	; 0x32
 8002e58:	4a08      	ldr	r2, [pc, #32]	; (8002e7c <UART_SetConfig+0x4e4>)
 8002e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5e:	095b      	lsrs	r3, r3, #5
 8002e60:	f003 020f 	and.w	r2, r3, #15
 8002e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4422      	add	r2, r4
 8002e6c:	609a      	str	r2, [r3, #8]
}
 8002e6e:	bf00      	nop
 8002e70:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002e74:	46bd      	mov	sp, r7
 8002e76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e7a:	bf00      	nop
 8002e7c:	51eb851f 	.word	0x51eb851f

08002e80 <__errno>:
 8002e80:	4b01      	ldr	r3, [pc, #4]	; (8002e88 <__errno+0x8>)
 8002e82:	6818      	ldr	r0, [r3, #0]
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	20000010 	.word	0x20000010

08002e8c <__libc_init_array>:
 8002e8c:	b570      	push	{r4, r5, r6, lr}
 8002e8e:	4d0d      	ldr	r5, [pc, #52]	; (8002ec4 <__libc_init_array+0x38>)
 8002e90:	4c0d      	ldr	r4, [pc, #52]	; (8002ec8 <__libc_init_array+0x3c>)
 8002e92:	1b64      	subs	r4, r4, r5
 8002e94:	10a4      	asrs	r4, r4, #2
 8002e96:	2600      	movs	r6, #0
 8002e98:	42a6      	cmp	r6, r4
 8002e9a:	d109      	bne.n	8002eb0 <__libc_init_array+0x24>
 8002e9c:	4d0b      	ldr	r5, [pc, #44]	; (8002ecc <__libc_init_array+0x40>)
 8002e9e:	4c0c      	ldr	r4, [pc, #48]	; (8002ed0 <__libc_init_array+0x44>)
 8002ea0:	f000 fc8e 	bl	80037c0 <_init>
 8002ea4:	1b64      	subs	r4, r4, r5
 8002ea6:	10a4      	asrs	r4, r4, #2
 8002ea8:	2600      	movs	r6, #0
 8002eaa:	42a6      	cmp	r6, r4
 8002eac:	d105      	bne.n	8002eba <__libc_init_array+0x2e>
 8002eae:	bd70      	pop	{r4, r5, r6, pc}
 8002eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eb4:	4798      	blx	r3
 8002eb6:	3601      	adds	r6, #1
 8002eb8:	e7ee      	b.n	8002e98 <__libc_init_array+0xc>
 8002eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ebe:	4798      	blx	r3
 8002ec0:	3601      	adds	r6, #1
 8002ec2:	e7f2      	b.n	8002eaa <__libc_init_array+0x1e>
 8002ec4:	080041bc 	.word	0x080041bc
 8002ec8:	080041bc 	.word	0x080041bc
 8002ecc:	080041bc 	.word	0x080041bc
 8002ed0:	080041c0 	.word	0x080041c0

08002ed4 <memset>:
 8002ed4:	4402      	add	r2, r0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d100      	bne.n	8002ede <memset+0xa>
 8002edc:	4770      	bx	lr
 8002ede:	f803 1b01 	strb.w	r1, [r3], #1
 8002ee2:	e7f9      	b.n	8002ed8 <memset+0x4>

08002ee4 <siprintf>:
 8002ee4:	b40e      	push	{r1, r2, r3}
 8002ee6:	b500      	push	{lr}
 8002ee8:	b09c      	sub	sp, #112	; 0x70
 8002eea:	ab1d      	add	r3, sp, #116	; 0x74
 8002eec:	9002      	str	r0, [sp, #8]
 8002eee:	9006      	str	r0, [sp, #24]
 8002ef0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002ef4:	4809      	ldr	r0, [pc, #36]	; (8002f1c <siprintf+0x38>)
 8002ef6:	9107      	str	r1, [sp, #28]
 8002ef8:	9104      	str	r1, [sp, #16]
 8002efa:	4909      	ldr	r1, [pc, #36]	; (8002f20 <siprintf+0x3c>)
 8002efc:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f00:	9105      	str	r1, [sp, #20]
 8002f02:	6800      	ldr	r0, [r0, #0]
 8002f04:	9301      	str	r3, [sp, #4]
 8002f06:	a902      	add	r1, sp, #8
 8002f08:	f000 f868 	bl	8002fdc <_svfiprintf_r>
 8002f0c:	9b02      	ldr	r3, [sp, #8]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	701a      	strb	r2, [r3, #0]
 8002f12:	b01c      	add	sp, #112	; 0x70
 8002f14:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f18:	b003      	add	sp, #12
 8002f1a:	4770      	bx	lr
 8002f1c:	20000010 	.word	0x20000010
 8002f20:	ffff0208 	.word	0xffff0208

08002f24 <__ssputs_r>:
 8002f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f28:	688e      	ldr	r6, [r1, #8]
 8002f2a:	429e      	cmp	r6, r3
 8002f2c:	4682      	mov	sl, r0
 8002f2e:	460c      	mov	r4, r1
 8002f30:	4690      	mov	r8, r2
 8002f32:	461f      	mov	r7, r3
 8002f34:	d838      	bhi.n	8002fa8 <__ssputs_r+0x84>
 8002f36:	898a      	ldrh	r2, [r1, #12]
 8002f38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002f3c:	d032      	beq.n	8002fa4 <__ssputs_r+0x80>
 8002f3e:	6825      	ldr	r5, [r4, #0]
 8002f40:	6909      	ldr	r1, [r1, #16]
 8002f42:	eba5 0901 	sub.w	r9, r5, r1
 8002f46:	6965      	ldr	r5, [r4, #20]
 8002f48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002f50:	3301      	adds	r3, #1
 8002f52:	444b      	add	r3, r9
 8002f54:	106d      	asrs	r5, r5, #1
 8002f56:	429d      	cmp	r5, r3
 8002f58:	bf38      	it	cc
 8002f5a:	461d      	movcc	r5, r3
 8002f5c:	0553      	lsls	r3, r2, #21
 8002f5e:	d531      	bpl.n	8002fc4 <__ssputs_r+0xa0>
 8002f60:	4629      	mov	r1, r5
 8002f62:	f000 fb63 	bl	800362c <_malloc_r>
 8002f66:	4606      	mov	r6, r0
 8002f68:	b950      	cbnz	r0, 8002f80 <__ssputs_r+0x5c>
 8002f6a:	230c      	movs	r3, #12
 8002f6c:	f8ca 3000 	str.w	r3, [sl]
 8002f70:	89a3      	ldrh	r3, [r4, #12]
 8002f72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f76:	81a3      	strh	r3, [r4, #12]
 8002f78:	f04f 30ff 	mov.w	r0, #4294967295
 8002f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f80:	6921      	ldr	r1, [r4, #16]
 8002f82:	464a      	mov	r2, r9
 8002f84:	f000 fabe 	bl	8003504 <memcpy>
 8002f88:	89a3      	ldrh	r3, [r4, #12]
 8002f8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f92:	81a3      	strh	r3, [r4, #12]
 8002f94:	6126      	str	r6, [r4, #16]
 8002f96:	6165      	str	r5, [r4, #20]
 8002f98:	444e      	add	r6, r9
 8002f9a:	eba5 0509 	sub.w	r5, r5, r9
 8002f9e:	6026      	str	r6, [r4, #0]
 8002fa0:	60a5      	str	r5, [r4, #8]
 8002fa2:	463e      	mov	r6, r7
 8002fa4:	42be      	cmp	r6, r7
 8002fa6:	d900      	bls.n	8002faa <__ssputs_r+0x86>
 8002fa8:	463e      	mov	r6, r7
 8002faa:	6820      	ldr	r0, [r4, #0]
 8002fac:	4632      	mov	r2, r6
 8002fae:	4641      	mov	r1, r8
 8002fb0:	f000 fab6 	bl	8003520 <memmove>
 8002fb4:	68a3      	ldr	r3, [r4, #8]
 8002fb6:	1b9b      	subs	r3, r3, r6
 8002fb8:	60a3      	str	r3, [r4, #8]
 8002fba:	6823      	ldr	r3, [r4, #0]
 8002fbc:	4433      	add	r3, r6
 8002fbe:	6023      	str	r3, [r4, #0]
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	e7db      	b.n	8002f7c <__ssputs_r+0x58>
 8002fc4:	462a      	mov	r2, r5
 8002fc6:	f000 fba5 	bl	8003714 <_realloc_r>
 8002fca:	4606      	mov	r6, r0
 8002fcc:	2800      	cmp	r0, #0
 8002fce:	d1e1      	bne.n	8002f94 <__ssputs_r+0x70>
 8002fd0:	6921      	ldr	r1, [r4, #16]
 8002fd2:	4650      	mov	r0, sl
 8002fd4:	f000 fabe 	bl	8003554 <_free_r>
 8002fd8:	e7c7      	b.n	8002f6a <__ssputs_r+0x46>
	...

08002fdc <_svfiprintf_r>:
 8002fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fe0:	4698      	mov	r8, r3
 8002fe2:	898b      	ldrh	r3, [r1, #12]
 8002fe4:	061b      	lsls	r3, r3, #24
 8002fe6:	b09d      	sub	sp, #116	; 0x74
 8002fe8:	4607      	mov	r7, r0
 8002fea:	460d      	mov	r5, r1
 8002fec:	4614      	mov	r4, r2
 8002fee:	d50e      	bpl.n	800300e <_svfiprintf_r+0x32>
 8002ff0:	690b      	ldr	r3, [r1, #16]
 8002ff2:	b963      	cbnz	r3, 800300e <_svfiprintf_r+0x32>
 8002ff4:	2140      	movs	r1, #64	; 0x40
 8002ff6:	f000 fb19 	bl	800362c <_malloc_r>
 8002ffa:	6028      	str	r0, [r5, #0]
 8002ffc:	6128      	str	r0, [r5, #16]
 8002ffe:	b920      	cbnz	r0, 800300a <_svfiprintf_r+0x2e>
 8003000:	230c      	movs	r3, #12
 8003002:	603b      	str	r3, [r7, #0]
 8003004:	f04f 30ff 	mov.w	r0, #4294967295
 8003008:	e0d1      	b.n	80031ae <_svfiprintf_r+0x1d2>
 800300a:	2340      	movs	r3, #64	; 0x40
 800300c:	616b      	str	r3, [r5, #20]
 800300e:	2300      	movs	r3, #0
 8003010:	9309      	str	r3, [sp, #36]	; 0x24
 8003012:	2320      	movs	r3, #32
 8003014:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003018:	f8cd 800c 	str.w	r8, [sp, #12]
 800301c:	2330      	movs	r3, #48	; 0x30
 800301e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80031c8 <_svfiprintf_r+0x1ec>
 8003022:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003026:	f04f 0901 	mov.w	r9, #1
 800302a:	4623      	mov	r3, r4
 800302c:	469a      	mov	sl, r3
 800302e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003032:	b10a      	cbz	r2, 8003038 <_svfiprintf_r+0x5c>
 8003034:	2a25      	cmp	r2, #37	; 0x25
 8003036:	d1f9      	bne.n	800302c <_svfiprintf_r+0x50>
 8003038:	ebba 0b04 	subs.w	fp, sl, r4
 800303c:	d00b      	beq.n	8003056 <_svfiprintf_r+0x7a>
 800303e:	465b      	mov	r3, fp
 8003040:	4622      	mov	r2, r4
 8003042:	4629      	mov	r1, r5
 8003044:	4638      	mov	r0, r7
 8003046:	f7ff ff6d 	bl	8002f24 <__ssputs_r>
 800304a:	3001      	adds	r0, #1
 800304c:	f000 80aa 	beq.w	80031a4 <_svfiprintf_r+0x1c8>
 8003050:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003052:	445a      	add	r2, fp
 8003054:	9209      	str	r2, [sp, #36]	; 0x24
 8003056:	f89a 3000 	ldrb.w	r3, [sl]
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 80a2 	beq.w	80031a4 <_svfiprintf_r+0x1c8>
 8003060:	2300      	movs	r3, #0
 8003062:	f04f 32ff 	mov.w	r2, #4294967295
 8003066:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800306a:	f10a 0a01 	add.w	sl, sl, #1
 800306e:	9304      	str	r3, [sp, #16]
 8003070:	9307      	str	r3, [sp, #28]
 8003072:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003076:	931a      	str	r3, [sp, #104]	; 0x68
 8003078:	4654      	mov	r4, sl
 800307a:	2205      	movs	r2, #5
 800307c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003080:	4851      	ldr	r0, [pc, #324]	; (80031c8 <_svfiprintf_r+0x1ec>)
 8003082:	f7fd f8b5 	bl	80001f0 <memchr>
 8003086:	9a04      	ldr	r2, [sp, #16]
 8003088:	b9d8      	cbnz	r0, 80030c2 <_svfiprintf_r+0xe6>
 800308a:	06d0      	lsls	r0, r2, #27
 800308c:	bf44      	itt	mi
 800308e:	2320      	movmi	r3, #32
 8003090:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003094:	0711      	lsls	r1, r2, #28
 8003096:	bf44      	itt	mi
 8003098:	232b      	movmi	r3, #43	; 0x2b
 800309a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800309e:	f89a 3000 	ldrb.w	r3, [sl]
 80030a2:	2b2a      	cmp	r3, #42	; 0x2a
 80030a4:	d015      	beq.n	80030d2 <_svfiprintf_r+0xf6>
 80030a6:	9a07      	ldr	r2, [sp, #28]
 80030a8:	4654      	mov	r4, sl
 80030aa:	2000      	movs	r0, #0
 80030ac:	f04f 0c0a 	mov.w	ip, #10
 80030b0:	4621      	mov	r1, r4
 80030b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030b6:	3b30      	subs	r3, #48	; 0x30
 80030b8:	2b09      	cmp	r3, #9
 80030ba:	d94e      	bls.n	800315a <_svfiprintf_r+0x17e>
 80030bc:	b1b0      	cbz	r0, 80030ec <_svfiprintf_r+0x110>
 80030be:	9207      	str	r2, [sp, #28]
 80030c0:	e014      	b.n	80030ec <_svfiprintf_r+0x110>
 80030c2:	eba0 0308 	sub.w	r3, r0, r8
 80030c6:	fa09 f303 	lsl.w	r3, r9, r3
 80030ca:	4313      	orrs	r3, r2
 80030cc:	9304      	str	r3, [sp, #16]
 80030ce:	46a2      	mov	sl, r4
 80030d0:	e7d2      	b.n	8003078 <_svfiprintf_r+0x9c>
 80030d2:	9b03      	ldr	r3, [sp, #12]
 80030d4:	1d19      	adds	r1, r3, #4
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	9103      	str	r1, [sp, #12]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	bfbb      	ittet	lt
 80030de:	425b      	neglt	r3, r3
 80030e0:	f042 0202 	orrlt.w	r2, r2, #2
 80030e4:	9307      	strge	r3, [sp, #28]
 80030e6:	9307      	strlt	r3, [sp, #28]
 80030e8:	bfb8      	it	lt
 80030ea:	9204      	strlt	r2, [sp, #16]
 80030ec:	7823      	ldrb	r3, [r4, #0]
 80030ee:	2b2e      	cmp	r3, #46	; 0x2e
 80030f0:	d10c      	bne.n	800310c <_svfiprintf_r+0x130>
 80030f2:	7863      	ldrb	r3, [r4, #1]
 80030f4:	2b2a      	cmp	r3, #42	; 0x2a
 80030f6:	d135      	bne.n	8003164 <_svfiprintf_r+0x188>
 80030f8:	9b03      	ldr	r3, [sp, #12]
 80030fa:	1d1a      	adds	r2, r3, #4
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	9203      	str	r2, [sp, #12]
 8003100:	2b00      	cmp	r3, #0
 8003102:	bfb8      	it	lt
 8003104:	f04f 33ff 	movlt.w	r3, #4294967295
 8003108:	3402      	adds	r4, #2
 800310a:	9305      	str	r3, [sp, #20]
 800310c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80031d8 <_svfiprintf_r+0x1fc>
 8003110:	7821      	ldrb	r1, [r4, #0]
 8003112:	2203      	movs	r2, #3
 8003114:	4650      	mov	r0, sl
 8003116:	f7fd f86b 	bl	80001f0 <memchr>
 800311a:	b140      	cbz	r0, 800312e <_svfiprintf_r+0x152>
 800311c:	2340      	movs	r3, #64	; 0x40
 800311e:	eba0 000a 	sub.w	r0, r0, sl
 8003122:	fa03 f000 	lsl.w	r0, r3, r0
 8003126:	9b04      	ldr	r3, [sp, #16]
 8003128:	4303      	orrs	r3, r0
 800312a:	3401      	adds	r4, #1
 800312c:	9304      	str	r3, [sp, #16]
 800312e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003132:	4826      	ldr	r0, [pc, #152]	; (80031cc <_svfiprintf_r+0x1f0>)
 8003134:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003138:	2206      	movs	r2, #6
 800313a:	f7fd f859 	bl	80001f0 <memchr>
 800313e:	2800      	cmp	r0, #0
 8003140:	d038      	beq.n	80031b4 <_svfiprintf_r+0x1d8>
 8003142:	4b23      	ldr	r3, [pc, #140]	; (80031d0 <_svfiprintf_r+0x1f4>)
 8003144:	bb1b      	cbnz	r3, 800318e <_svfiprintf_r+0x1b2>
 8003146:	9b03      	ldr	r3, [sp, #12]
 8003148:	3307      	adds	r3, #7
 800314a:	f023 0307 	bic.w	r3, r3, #7
 800314e:	3308      	adds	r3, #8
 8003150:	9303      	str	r3, [sp, #12]
 8003152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003154:	4433      	add	r3, r6
 8003156:	9309      	str	r3, [sp, #36]	; 0x24
 8003158:	e767      	b.n	800302a <_svfiprintf_r+0x4e>
 800315a:	fb0c 3202 	mla	r2, ip, r2, r3
 800315e:	460c      	mov	r4, r1
 8003160:	2001      	movs	r0, #1
 8003162:	e7a5      	b.n	80030b0 <_svfiprintf_r+0xd4>
 8003164:	2300      	movs	r3, #0
 8003166:	3401      	adds	r4, #1
 8003168:	9305      	str	r3, [sp, #20]
 800316a:	4619      	mov	r1, r3
 800316c:	f04f 0c0a 	mov.w	ip, #10
 8003170:	4620      	mov	r0, r4
 8003172:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003176:	3a30      	subs	r2, #48	; 0x30
 8003178:	2a09      	cmp	r2, #9
 800317a:	d903      	bls.n	8003184 <_svfiprintf_r+0x1a8>
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0c5      	beq.n	800310c <_svfiprintf_r+0x130>
 8003180:	9105      	str	r1, [sp, #20]
 8003182:	e7c3      	b.n	800310c <_svfiprintf_r+0x130>
 8003184:	fb0c 2101 	mla	r1, ip, r1, r2
 8003188:	4604      	mov	r4, r0
 800318a:	2301      	movs	r3, #1
 800318c:	e7f0      	b.n	8003170 <_svfiprintf_r+0x194>
 800318e:	ab03      	add	r3, sp, #12
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	462a      	mov	r2, r5
 8003194:	4b0f      	ldr	r3, [pc, #60]	; (80031d4 <_svfiprintf_r+0x1f8>)
 8003196:	a904      	add	r1, sp, #16
 8003198:	4638      	mov	r0, r7
 800319a:	f3af 8000 	nop.w
 800319e:	1c42      	adds	r2, r0, #1
 80031a0:	4606      	mov	r6, r0
 80031a2:	d1d6      	bne.n	8003152 <_svfiprintf_r+0x176>
 80031a4:	89ab      	ldrh	r3, [r5, #12]
 80031a6:	065b      	lsls	r3, r3, #25
 80031a8:	f53f af2c 	bmi.w	8003004 <_svfiprintf_r+0x28>
 80031ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80031ae:	b01d      	add	sp, #116	; 0x74
 80031b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031b4:	ab03      	add	r3, sp, #12
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	462a      	mov	r2, r5
 80031ba:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <_svfiprintf_r+0x1f8>)
 80031bc:	a904      	add	r1, sp, #16
 80031be:	4638      	mov	r0, r7
 80031c0:	f000 f87a 	bl	80032b8 <_printf_i>
 80031c4:	e7eb      	b.n	800319e <_svfiprintf_r+0x1c2>
 80031c6:	bf00      	nop
 80031c8:	08004180 	.word	0x08004180
 80031cc:	0800418a 	.word	0x0800418a
 80031d0:	00000000 	.word	0x00000000
 80031d4:	08002f25 	.word	0x08002f25
 80031d8:	08004186 	.word	0x08004186

080031dc <_printf_common>:
 80031dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031e0:	4616      	mov	r6, r2
 80031e2:	4699      	mov	r9, r3
 80031e4:	688a      	ldr	r2, [r1, #8]
 80031e6:	690b      	ldr	r3, [r1, #16]
 80031e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80031ec:	4293      	cmp	r3, r2
 80031ee:	bfb8      	it	lt
 80031f0:	4613      	movlt	r3, r2
 80031f2:	6033      	str	r3, [r6, #0]
 80031f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80031f8:	4607      	mov	r7, r0
 80031fa:	460c      	mov	r4, r1
 80031fc:	b10a      	cbz	r2, 8003202 <_printf_common+0x26>
 80031fe:	3301      	adds	r3, #1
 8003200:	6033      	str	r3, [r6, #0]
 8003202:	6823      	ldr	r3, [r4, #0]
 8003204:	0699      	lsls	r1, r3, #26
 8003206:	bf42      	ittt	mi
 8003208:	6833      	ldrmi	r3, [r6, #0]
 800320a:	3302      	addmi	r3, #2
 800320c:	6033      	strmi	r3, [r6, #0]
 800320e:	6825      	ldr	r5, [r4, #0]
 8003210:	f015 0506 	ands.w	r5, r5, #6
 8003214:	d106      	bne.n	8003224 <_printf_common+0x48>
 8003216:	f104 0a19 	add.w	sl, r4, #25
 800321a:	68e3      	ldr	r3, [r4, #12]
 800321c:	6832      	ldr	r2, [r6, #0]
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	42ab      	cmp	r3, r5
 8003222:	dc26      	bgt.n	8003272 <_printf_common+0x96>
 8003224:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003228:	1e13      	subs	r3, r2, #0
 800322a:	6822      	ldr	r2, [r4, #0]
 800322c:	bf18      	it	ne
 800322e:	2301      	movne	r3, #1
 8003230:	0692      	lsls	r2, r2, #26
 8003232:	d42b      	bmi.n	800328c <_printf_common+0xb0>
 8003234:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003238:	4649      	mov	r1, r9
 800323a:	4638      	mov	r0, r7
 800323c:	47c0      	blx	r8
 800323e:	3001      	adds	r0, #1
 8003240:	d01e      	beq.n	8003280 <_printf_common+0xa4>
 8003242:	6823      	ldr	r3, [r4, #0]
 8003244:	68e5      	ldr	r5, [r4, #12]
 8003246:	6832      	ldr	r2, [r6, #0]
 8003248:	f003 0306 	and.w	r3, r3, #6
 800324c:	2b04      	cmp	r3, #4
 800324e:	bf08      	it	eq
 8003250:	1aad      	subeq	r5, r5, r2
 8003252:	68a3      	ldr	r3, [r4, #8]
 8003254:	6922      	ldr	r2, [r4, #16]
 8003256:	bf0c      	ite	eq
 8003258:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800325c:	2500      	movne	r5, #0
 800325e:	4293      	cmp	r3, r2
 8003260:	bfc4      	itt	gt
 8003262:	1a9b      	subgt	r3, r3, r2
 8003264:	18ed      	addgt	r5, r5, r3
 8003266:	2600      	movs	r6, #0
 8003268:	341a      	adds	r4, #26
 800326a:	42b5      	cmp	r5, r6
 800326c:	d11a      	bne.n	80032a4 <_printf_common+0xc8>
 800326e:	2000      	movs	r0, #0
 8003270:	e008      	b.n	8003284 <_printf_common+0xa8>
 8003272:	2301      	movs	r3, #1
 8003274:	4652      	mov	r2, sl
 8003276:	4649      	mov	r1, r9
 8003278:	4638      	mov	r0, r7
 800327a:	47c0      	blx	r8
 800327c:	3001      	adds	r0, #1
 800327e:	d103      	bne.n	8003288 <_printf_common+0xac>
 8003280:	f04f 30ff 	mov.w	r0, #4294967295
 8003284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003288:	3501      	adds	r5, #1
 800328a:	e7c6      	b.n	800321a <_printf_common+0x3e>
 800328c:	18e1      	adds	r1, r4, r3
 800328e:	1c5a      	adds	r2, r3, #1
 8003290:	2030      	movs	r0, #48	; 0x30
 8003292:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003296:	4422      	add	r2, r4
 8003298:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800329c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80032a0:	3302      	adds	r3, #2
 80032a2:	e7c7      	b.n	8003234 <_printf_common+0x58>
 80032a4:	2301      	movs	r3, #1
 80032a6:	4622      	mov	r2, r4
 80032a8:	4649      	mov	r1, r9
 80032aa:	4638      	mov	r0, r7
 80032ac:	47c0      	blx	r8
 80032ae:	3001      	adds	r0, #1
 80032b0:	d0e6      	beq.n	8003280 <_printf_common+0xa4>
 80032b2:	3601      	adds	r6, #1
 80032b4:	e7d9      	b.n	800326a <_printf_common+0x8e>
	...

080032b8 <_printf_i>:
 80032b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032bc:	7e0f      	ldrb	r7, [r1, #24]
 80032be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80032c0:	2f78      	cmp	r7, #120	; 0x78
 80032c2:	4691      	mov	r9, r2
 80032c4:	4680      	mov	r8, r0
 80032c6:	460c      	mov	r4, r1
 80032c8:	469a      	mov	sl, r3
 80032ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80032ce:	d807      	bhi.n	80032e0 <_printf_i+0x28>
 80032d0:	2f62      	cmp	r7, #98	; 0x62
 80032d2:	d80a      	bhi.n	80032ea <_printf_i+0x32>
 80032d4:	2f00      	cmp	r7, #0
 80032d6:	f000 80d8 	beq.w	800348a <_printf_i+0x1d2>
 80032da:	2f58      	cmp	r7, #88	; 0x58
 80032dc:	f000 80a3 	beq.w	8003426 <_printf_i+0x16e>
 80032e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80032e8:	e03a      	b.n	8003360 <_printf_i+0xa8>
 80032ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80032ee:	2b15      	cmp	r3, #21
 80032f0:	d8f6      	bhi.n	80032e0 <_printf_i+0x28>
 80032f2:	a101      	add	r1, pc, #4	; (adr r1, 80032f8 <_printf_i+0x40>)
 80032f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80032f8:	08003351 	.word	0x08003351
 80032fc:	08003365 	.word	0x08003365
 8003300:	080032e1 	.word	0x080032e1
 8003304:	080032e1 	.word	0x080032e1
 8003308:	080032e1 	.word	0x080032e1
 800330c:	080032e1 	.word	0x080032e1
 8003310:	08003365 	.word	0x08003365
 8003314:	080032e1 	.word	0x080032e1
 8003318:	080032e1 	.word	0x080032e1
 800331c:	080032e1 	.word	0x080032e1
 8003320:	080032e1 	.word	0x080032e1
 8003324:	08003471 	.word	0x08003471
 8003328:	08003395 	.word	0x08003395
 800332c:	08003453 	.word	0x08003453
 8003330:	080032e1 	.word	0x080032e1
 8003334:	080032e1 	.word	0x080032e1
 8003338:	08003493 	.word	0x08003493
 800333c:	080032e1 	.word	0x080032e1
 8003340:	08003395 	.word	0x08003395
 8003344:	080032e1 	.word	0x080032e1
 8003348:	080032e1 	.word	0x080032e1
 800334c:	0800345b 	.word	0x0800345b
 8003350:	682b      	ldr	r3, [r5, #0]
 8003352:	1d1a      	adds	r2, r3, #4
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	602a      	str	r2, [r5, #0]
 8003358:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800335c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003360:	2301      	movs	r3, #1
 8003362:	e0a3      	b.n	80034ac <_printf_i+0x1f4>
 8003364:	6820      	ldr	r0, [r4, #0]
 8003366:	6829      	ldr	r1, [r5, #0]
 8003368:	0606      	lsls	r6, r0, #24
 800336a:	f101 0304 	add.w	r3, r1, #4
 800336e:	d50a      	bpl.n	8003386 <_printf_i+0xce>
 8003370:	680e      	ldr	r6, [r1, #0]
 8003372:	602b      	str	r3, [r5, #0]
 8003374:	2e00      	cmp	r6, #0
 8003376:	da03      	bge.n	8003380 <_printf_i+0xc8>
 8003378:	232d      	movs	r3, #45	; 0x2d
 800337a:	4276      	negs	r6, r6
 800337c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003380:	485e      	ldr	r0, [pc, #376]	; (80034fc <_printf_i+0x244>)
 8003382:	230a      	movs	r3, #10
 8003384:	e019      	b.n	80033ba <_printf_i+0x102>
 8003386:	680e      	ldr	r6, [r1, #0]
 8003388:	602b      	str	r3, [r5, #0]
 800338a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800338e:	bf18      	it	ne
 8003390:	b236      	sxthne	r6, r6
 8003392:	e7ef      	b.n	8003374 <_printf_i+0xbc>
 8003394:	682b      	ldr	r3, [r5, #0]
 8003396:	6820      	ldr	r0, [r4, #0]
 8003398:	1d19      	adds	r1, r3, #4
 800339a:	6029      	str	r1, [r5, #0]
 800339c:	0601      	lsls	r1, r0, #24
 800339e:	d501      	bpl.n	80033a4 <_printf_i+0xec>
 80033a0:	681e      	ldr	r6, [r3, #0]
 80033a2:	e002      	b.n	80033aa <_printf_i+0xf2>
 80033a4:	0646      	lsls	r6, r0, #25
 80033a6:	d5fb      	bpl.n	80033a0 <_printf_i+0xe8>
 80033a8:	881e      	ldrh	r6, [r3, #0]
 80033aa:	4854      	ldr	r0, [pc, #336]	; (80034fc <_printf_i+0x244>)
 80033ac:	2f6f      	cmp	r7, #111	; 0x6f
 80033ae:	bf0c      	ite	eq
 80033b0:	2308      	moveq	r3, #8
 80033b2:	230a      	movne	r3, #10
 80033b4:	2100      	movs	r1, #0
 80033b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80033ba:	6865      	ldr	r5, [r4, #4]
 80033bc:	60a5      	str	r5, [r4, #8]
 80033be:	2d00      	cmp	r5, #0
 80033c0:	bfa2      	ittt	ge
 80033c2:	6821      	ldrge	r1, [r4, #0]
 80033c4:	f021 0104 	bicge.w	r1, r1, #4
 80033c8:	6021      	strge	r1, [r4, #0]
 80033ca:	b90e      	cbnz	r6, 80033d0 <_printf_i+0x118>
 80033cc:	2d00      	cmp	r5, #0
 80033ce:	d04d      	beq.n	800346c <_printf_i+0x1b4>
 80033d0:	4615      	mov	r5, r2
 80033d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80033d6:	fb03 6711 	mls	r7, r3, r1, r6
 80033da:	5dc7      	ldrb	r7, [r0, r7]
 80033dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80033e0:	4637      	mov	r7, r6
 80033e2:	42bb      	cmp	r3, r7
 80033e4:	460e      	mov	r6, r1
 80033e6:	d9f4      	bls.n	80033d2 <_printf_i+0x11a>
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d10b      	bne.n	8003404 <_printf_i+0x14c>
 80033ec:	6823      	ldr	r3, [r4, #0]
 80033ee:	07de      	lsls	r6, r3, #31
 80033f0:	d508      	bpl.n	8003404 <_printf_i+0x14c>
 80033f2:	6923      	ldr	r3, [r4, #16]
 80033f4:	6861      	ldr	r1, [r4, #4]
 80033f6:	4299      	cmp	r1, r3
 80033f8:	bfde      	ittt	le
 80033fa:	2330      	movle	r3, #48	; 0x30
 80033fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003400:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003404:	1b52      	subs	r2, r2, r5
 8003406:	6122      	str	r2, [r4, #16]
 8003408:	f8cd a000 	str.w	sl, [sp]
 800340c:	464b      	mov	r3, r9
 800340e:	aa03      	add	r2, sp, #12
 8003410:	4621      	mov	r1, r4
 8003412:	4640      	mov	r0, r8
 8003414:	f7ff fee2 	bl	80031dc <_printf_common>
 8003418:	3001      	adds	r0, #1
 800341a:	d14c      	bne.n	80034b6 <_printf_i+0x1fe>
 800341c:	f04f 30ff 	mov.w	r0, #4294967295
 8003420:	b004      	add	sp, #16
 8003422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003426:	4835      	ldr	r0, [pc, #212]	; (80034fc <_printf_i+0x244>)
 8003428:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800342c:	6829      	ldr	r1, [r5, #0]
 800342e:	6823      	ldr	r3, [r4, #0]
 8003430:	f851 6b04 	ldr.w	r6, [r1], #4
 8003434:	6029      	str	r1, [r5, #0]
 8003436:	061d      	lsls	r5, r3, #24
 8003438:	d514      	bpl.n	8003464 <_printf_i+0x1ac>
 800343a:	07df      	lsls	r7, r3, #31
 800343c:	bf44      	itt	mi
 800343e:	f043 0320 	orrmi.w	r3, r3, #32
 8003442:	6023      	strmi	r3, [r4, #0]
 8003444:	b91e      	cbnz	r6, 800344e <_printf_i+0x196>
 8003446:	6823      	ldr	r3, [r4, #0]
 8003448:	f023 0320 	bic.w	r3, r3, #32
 800344c:	6023      	str	r3, [r4, #0]
 800344e:	2310      	movs	r3, #16
 8003450:	e7b0      	b.n	80033b4 <_printf_i+0xfc>
 8003452:	6823      	ldr	r3, [r4, #0]
 8003454:	f043 0320 	orr.w	r3, r3, #32
 8003458:	6023      	str	r3, [r4, #0]
 800345a:	2378      	movs	r3, #120	; 0x78
 800345c:	4828      	ldr	r0, [pc, #160]	; (8003500 <_printf_i+0x248>)
 800345e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003462:	e7e3      	b.n	800342c <_printf_i+0x174>
 8003464:	0659      	lsls	r1, r3, #25
 8003466:	bf48      	it	mi
 8003468:	b2b6      	uxthmi	r6, r6
 800346a:	e7e6      	b.n	800343a <_printf_i+0x182>
 800346c:	4615      	mov	r5, r2
 800346e:	e7bb      	b.n	80033e8 <_printf_i+0x130>
 8003470:	682b      	ldr	r3, [r5, #0]
 8003472:	6826      	ldr	r6, [r4, #0]
 8003474:	6961      	ldr	r1, [r4, #20]
 8003476:	1d18      	adds	r0, r3, #4
 8003478:	6028      	str	r0, [r5, #0]
 800347a:	0635      	lsls	r5, r6, #24
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	d501      	bpl.n	8003484 <_printf_i+0x1cc>
 8003480:	6019      	str	r1, [r3, #0]
 8003482:	e002      	b.n	800348a <_printf_i+0x1d2>
 8003484:	0670      	lsls	r0, r6, #25
 8003486:	d5fb      	bpl.n	8003480 <_printf_i+0x1c8>
 8003488:	8019      	strh	r1, [r3, #0]
 800348a:	2300      	movs	r3, #0
 800348c:	6123      	str	r3, [r4, #16]
 800348e:	4615      	mov	r5, r2
 8003490:	e7ba      	b.n	8003408 <_printf_i+0x150>
 8003492:	682b      	ldr	r3, [r5, #0]
 8003494:	1d1a      	adds	r2, r3, #4
 8003496:	602a      	str	r2, [r5, #0]
 8003498:	681d      	ldr	r5, [r3, #0]
 800349a:	6862      	ldr	r2, [r4, #4]
 800349c:	2100      	movs	r1, #0
 800349e:	4628      	mov	r0, r5
 80034a0:	f7fc fea6 	bl	80001f0 <memchr>
 80034a4:	b108      	cbz	r0, 80034aa <_printf_i+0x1f2>
 80034a6:	1b40      	subs	r0, r0, r5
 80034a8:	6060      	str	r0, [r4, #4]
 80034aa:	6863      	ldr	r3, [r4, #4]
 80034ac:	6123      	str	r3, [r4, #16]
 80034ae:	2300      	movs	r3, #0
 80034b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034b4:	e7a8      	b.n	8003408 <_printf_i+0x150>
 80034b6:	6923      	ldr	r3, [r4, #16]
 80034b8:	462a      	mov	r2, r5
 80034ba:	4649      	mov	r1, r9
 80034bc:	4640      	mov	r0, r8
 80034be:	47d0      	blx	sl
 80034c0:	3001      	adds	r0, #1
 80034c2:	d0ab      	beq.n	800341c <_printf_i+0x164>
 80034c4:	6823      	ldr	r3, [r4, #0]
 80034c6:	079b      	lsls	r3, r3, #30
 80034c8:	d413      	bmi.n	80034f2 <_printf_i+0x23a>
 80034ca:	68e0      	ldr	r0, [r4, #12]
 80034cc:	9b03      	ldr	r3, [sp, #12]
 80034ce:	4298      	cmp	r0, r3
 80034d0:	bfb8      	it	lt
 80034d2:	4618      	movlt	r0, r3
 80034d4:	e7a4      	b.n	8003420 <_printf_i+0x168>
 80034d6:	2301      	movs	r3, #1
 80034d8:	4632      	mov	r2, r6
 80034da:	4649      	mov	r1, r9
 80034dc:	4640      	mov	r0, r8
 80034de:	47d0      	blx	sl
 80034e0:	3001      	adds	r0, #1
 80034e2:	d09b      	beq.n	800341c <_printf_i+0x164>
 80034e4:	3501      	adds	r5, #1
 80034e6:	68e3      	ldr	r3, [r4, #12]
 80034e8:	9903      	ldr	r1, [sp, #12]
 80034ea:	1a5b      	subs	r3, r3, r1
 80034ec:	42ab      	cmp	r3, r5
 80034ee:	dcf2      	bgt.n	80034d6 <_printf_i+0x21e>
 80034f0:	e7eb      	b.n	80034ca <_printf_i+0x212>
 80034f2:	2500      	movs	r5, #0
 80034f4:	f104 0619 	add.w	r6, r4, #25
 80034f8:	e7f5      	b.n	80034e6 <_printf_i+0x22e>
 80034fa:	bf00      	nop
 80034fc:	08004191 	.word	0x08004191
 8003500:	080041a2 	.word	0x080041a2

08003504 <memcpy>:
 8003504:	440a      	add	r2, r1
 8003506:	4291      	cmp	r1, r2
 8003508:	f100 33ff 	add.w	r3, r0, #4294967295
 800350c:	d100      	bne.n	8003510 <memcpy+0xc>
 800350e:	4770      	bx	lr
 8003510:	b510      	push	{r4, lr}
 8003512:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003516:	f803 4f01 	strb.w	r4, [r3, #1]!
 800351a:	4291      	cmp	r1, r2
 800351c:	d1f9      	bne.n	8003512 <memcpy+0xe>
 800351e:	bd10      	pop	{r4, pc}

08003520 <memmove>:
 8003520:	4288      	cmp	r0, r1
 8003522:	b510      	push	{r4, lr}
 8003524:	eb01 0402 	add.w	r4, r1, r2
 8003528:	d902      	bls.n	8003530 <memmove+0x10>
 800352a:	4284      	cmp	r4, r0
 800352c:	4623      	mov	r3, r4
 800352e:	d807      	bhi.n	8003540 <memmove+0x20>
 8003530:	1e43      	subs	r3, r0, #1
 8003532:	42a1      	cmp	r1, r4
 8003534:	d008      	beq.n	8003548 <memmove+0x28>
 8003536:	f811 2b01 	ldrb.w	r2, [r1], #1
 800353a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800353e:	e7f8      	b.n	8003532 <memmove+0x12>
 8003540:	4402      	add	r2, r0
 8003542:	4601      	mov	r1, r0
 8003544:	428a      	cmp	r2, r1
 8003546:	d100      	bne.n	800354a <memmove+0x2a>
 8003548:	bd10      	pop	{r4, pc}
 800354a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800354e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003552:	e7f7      	b.n	8003544 <memmove+0x24>

08003554 <_free_r>:
 8003554:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003556:	2900      	cmp	r1, #0
 8003558:	d044      	beq.n	80035e4 <_free_r+0x90>
 800355a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800355e:	9001      	str	r0, [sp, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	f1a1 0404 	sub.w	r4, r1, #4
 8003566:	bfb8      	it	lt
 8003568:	18e4      	addlt	r4, r4, r3
 800356a:	f000 f913 	bl	8003794 <__malloc_lock>
 800356e:	4a1e      	ldr	r2, [pc, #120]	; (80035e8 <_free_r+0x94>)
 8003570:	9801      	ldr	r0, [sp, #4]
 8003572:	6813      	ldr	r3, [r2, #0]
 8003574:	b933      	cbnz	r3, 8003584 <_free_r+0x30>
 8003576:	6063      	str	r3, [r4, #4]
 8003578:	6014      	str	r4, [r2, #0]
 800357a:	b003      	add	sp, #12
 800357c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003580:	f000 b90e 	b.w	80037a0 <__malloc_unlock>
 8003584:	42a3      	cmp	r3, r4
 8003586:	d908      	bls.n	800359a <_free_r+0x46>
 8003588:	6825      	ldr	r5, [r4, #0]
 800358a:	1961      	adds	r1, r4, r5
 800358c:	428b      	cmp	r3, r1
 800358e:	bf01      	itttt	eq
 8003590:	6819      	ldreq	r1, [r3, #0]
 8003592:	685b      	ldreq	r3, [r3, #4]
 8003594:	1949      	addeq	r1, r1, r5
 8003596:	6021      	streq	r1, [r4, #0]
 8003598:	e7ed      	b.n	8003576 <_free_r+0x22>
 800359a:	461a      	mov	r2, r3
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	b10b      	cbz	r3, 80035a4 <_free_r+0x50>
 80035a0:	42a3      	cmp	r3, r4
 80035a2:	d9fa      	bls.n	800359a <_free_r+0x46>
 80035a4:	6811      	ldr	r1, [r2, #0]
 80035a6:	1855      	adds	r5, r2, r1
 80035a8:	42a5      	cmp	r5, r4
 80035aa:	d10b      	bne.n	80035c4 <_free_r+0x70>
 80035ac:	6824      	ldr	r4, [r4, #0]
 80035ae:	4421      	add	r1, r4
 80035b0:	1854      	adds	r4, r2, r1
 80035b2:	42a3      	cmp	r3, r4
 80035b4:	6011      	str	r1, [r2, #0]
 80035b6:	d1e0      	bne.n	800357a <_free_r+0x26>
 80035b8:	681c      	ldr	r4, [r3, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	6053      	str	r3, [r2, #4]
 80035be:	4421      	add	r1, r4
 80035c0:	6011      	str	r1, [r2, #0]
 80035c2:	e7da      	b.n	800357a <_free_r+0x26>
 80035c4:	d902      	bls.n	80035cc <_free_r+0x78>
 80035c6:	230c      	movs	r3, #12
 80035c8:	6003      	str	r3, [r0, #0]
 80035ca:	e7d6      	b.n	800357a <_free_r+0x26>
 80035cc:	6825      	ldr	r5, [r4, #0]
 80035ce:	1961      	adds	r1, r4, r5
 80035d0:	428b      	cmp	r3, r1
 80035d2:	bf04      	itt	eq
 80035d4:	6819      	ldreq	r1, [r3, #0]
 80035d6:	685b      	ldreq	r3, [r3, #4]
 80035d8:	6063      	str	r3, [r4, #4]
 80035da:	bf04      	itt	eq
 80035dc:	1949      	addeq	r1, r1, r5
 80035de:	6021      	streq	r1, [r4, #0]
 80035e0:	6054      	str	r4, [r2, #4]
 80035e2:	e7ca      	b.n	800357a <_free_r+0x26>
 80035e4:	b003      	add	sp, #12
 80035e6:	bd30      	pop	{r4, r5, pc}
 80035e8:	20000314 	.word	0x20000314

080035ec <sbrk_aligned>:
 80035ec:	b570      	push	{r4, r5, r6, lr}
 80035ee:	4e0e      	ldr	r6, [pc, #56]	; (8003628 <sbrk_aligned+0x3c>)
 80035f0:	460c      	mov	r4, r1
 80035f2:	6831      	ldr	r1, [r6, #0]
 80035f4:	4605      	mov	r5, r0
 80035f6:	b911      	cbnz	r1, 80035fe <sbrk_aligned+0x12>
 80035f8:	f000 f8bc 	bl	8003774 <_sbrk_r>
 80035fc:	6030      	str	r0, [r6, #0]
 80035fe:	4621      	mov	r1, r4
 8003600:	4628      	mov	r0, r5
 8003602:	f000 f8b7 	bl	8003774 <_sbrk_r>
 8003606:	1c43      	adds	r3, r0, #1
 8003608:	d00a      	beq.n	8003620 <sbrk_aligned+0x34>
 800360a:	1cc4      	adds	r4, r0, #3
 800360c:	f024 0403 	bic.w	r4, r4, #3
 8003610:	42a0      	cmp	r0, r4
 8003612:	d007      	beq.n	8003624 <sbrk_aligned+0x38>
 8003614:	1a21      	subs	r1, r4, r0
 8003616:	4628      	mov	r0, r5
 8003618:	f000 f8ac 	bl	8003774 <_sbrk_r>
 800361c:	3001      	adds	r0, #1
 800361e:	d101      	bne.n	8003624 <sbrk_aligned+0x38>
 8003620:	f04f 34ff 	mov.w	r4, #4294967295
 8003624:	4620      	mov	r0, r4
 8003626:	bd70      	pop	{r4, r5, r6, pc}
 8003628:	20000318 	.word	0x20000318

0800362c <_malloc_r>:
 800362c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003630:	1ccd      	adds	r5, r1, #3
 8003632:	f025 0503 	bic.w	r5, r5, #3
 8003636:	3508      	adds	r5, #8
 8003638:	2d0c      	cmp	r5, #12
 800363a:	bf38      	it	cc
 800363c:	250c      	movcc	r5, #12
 800363e:	2d00      	cmp	r5, #0
 8003640:	4607      	mov	r7, r0
 8003642:	db01      	blt.n	8003648 <_malloc_r+0x1c>
 8003644:	42a9      	cmp	r1, r5
 8003646:	d905      	bls.n	8003654 <_malloc_r+0x28>
 8003648:	230c      	movs	r3, #12
 800364a:	603b      	str	r3, [r7, #0]
 800364c:	2600      	movs	r6, #0
 800364e:	4630      	mov	r0, r6
 8003650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003654:	4e2e      	ldr	r6, [pc, #184]	; (8003710 <_malloc_r+0xe4>)
 8003656:	f000 f89d 	bl	8003794 <__malloc_lock>
 800365a:	6833      	ldr	r3, [r6, #0]
 800365c:	461c      	mov	r4, r3
 800365e:	bb34      	cbnz	r4, 80036ae <_malloc_r+0x82>
 8003660:	4629      	mov	r1, r5
 8003662:	4638      	mov	r0, r7
 8003664:	f7ff ffc2 	bl	80035ec <sbrk_aligned>
 8003668:	1c43      	adds	r3, r0, #1
 800366a:	4604      	mov	r4, r0
 800366c:	d14d      	bne.n	800370a <_malloc_r+0xde>
 800366e:	6834      	ldr	r4, [r6, #0]
 8003670:	4626      	mov	r6, r4
 8003672:	2e00      	cmp	r6, #0
 8003674:	d140      	bne.n	80036f8 <_malloc_r+0xcc>
 8003676:	6823      	ldr	r3, [r4, #0]
 8003678:	4631      	mov	r1, r6
 800367a:	4638      	mov	r0, r7
 800367c:	eb04 0803 	add.w	r8, r4, r3
 8003680:	f000 f878 	bl	8003774 <_sbrk_r>
 8003684:	4580      	cmp	r8, r0
 8003686:	d13a      	bne.n	80036fe <_malloc_r+0xd2>
 8003688:	6821      	ldr	r1, [r4, #0]
 800368a:	3503      	adds	r5, #3
 800368c:	1a6d      	subs	r5, r5, r1
 800368e:	f025 0503 	bic.w	r5, r5, #3
 8003692:	3508      	adds	r5, #8
 8003694:	2d0c      	cmp	r5, #12
 8003696:	bf38      	it	cc
 8003698:	250c      	movcc	r5, #12
 800369a:	4629      	mov	r1, r5
 800369c:	4638      	mov	r0, r7
 800369e:	f7ff ffa5 	bl	80035ec <sbrk_aligned>
 80036a2:	3001      	adds	r0, #1
 80036a4:	d02b      	beq.n	80036fe <_malloc_r+0xd2>
 80036a6:	6823      	ldr	r3, [r4, #0]
 80036a8:	442b      	add	r3, r5
 80036aa:	6023      	str	r3, [r4, #0]
 80036ac:	e00e      	b.n	80036cc <_malloc_r+0xa0>
 80036ae:	6822      	ldr	r2, [r4, #0]
 80036b0:	1b52      	subs	r2, r2, r5
 80036b2:	d41e      	bmi.n	80036f2 <_malloc_r+0xc6>
 80036b4:	2a0b      	cmp	r2, #11
 80036b6:	d916      	bls.n	80036e6 <_malloc_r+0xba>
 80036b8:	1961      	adds	r1, r4, r5
 80036ba:	42a3      	cmp	r3, r4
 80036bc:	6025      	str	r5, [r4, #0]
 80036be:	bf18      	it	ne
 80036c0:	6059      	strne	r1, [r3, #4]
 80036c2:	6863      	ldr	r3, [r4, #4]
 80036c4:	bf08      	it	eq
 80036c6:	6031      	streq	r1, [r6, #0]
 80036c8:	5162      	str	r2, [r4, r5]
 80036ca:	604b      	str	r3, [r1, #4]
 80036cc:	4638      	mov	r0, r7
 80036ce:	f104 060b 	add.w	r6, r4, #11
 80036d2:	f000 f865 	bl	80037a0 <__malloc_unlock>
 80036d6:	f026 0607 	bic.w	r6, r6, #7
 80036da:	1d23      	adds	r3, r4, #4
 80036dc:	1af2      	subs	r2, r6, r3
 80036de:	d0b6      	beq.n	800364e <_malloc_r+0x22>
 80036e0:	1b9b      	subs	r3, r3, r6
 80036e2:	50a3      	str	r3, [r4, r2]
 80036e4:	e7b3      	b.n	800364e <_malloc_r+0x22>
 80036e6:	6862      	ldr	r2, [r4, #4]
 80036e8:	42a3      	cmp	r3, r4
 80036ea:	bf0c      	ite	eq
 80036ec:	6032      	streq	r2, [r6, #0]
 80036ee:	605a      	strne	r2, [r3, #4]
 80036f0:	e7ec      	b.n	80036cc <_malloc_r+0xa0>
 80036f2:	4623      	mov	r3, r4
 80036f4:	6864      	ldr	r4, [r4, #4]
 80036f6:	e7b2      	b.n	800365e <_malloc_r+0x32>
 80036f8:	4634      	mov	r4, r6
 80036fa:	6876      	ldr	r6, [r6, #4]
 80036fc:	e7b9      	b.n	8003672 <_malloc_r+0x46>
 80036fe:	230c      	movs	r3, #12
 8003700:	603b      	str	r3, [r7, #0]
 8003702:	4638      	mov	r0, r7
 8003704:	f000 f84c 	bl	80037a0 <__malloc_unlock>
 8003708:	e7a1      	b.n	800364e <_malloc_r+0x22>
 800370a:	6025      	str	r5, [r4, #0]
 800370c:	e7de      	b.n	80036cc <_malloc_r+0xa0>
 800370e:	bf00      	nop
 8003710:	20000314 	.word	0x20000314

08003714 <_realloc_r>:
 8003714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003718:	4680      	mov	r8, r0
 800371a:	4614      	mov	r4, r2
 800371c:	460e      	mov	r6, r1
 800371e:	b921      	cbnz	r1, 800372a <_realloc_r+0x16>
 8003720:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003724:	4611      	mov	r1, r2
 8003726:	f7ff bf81 	b.w	800362c <_malloc_r>
 800372a:	b92a      	cbnz	r2, 8003738 <_realloc_r+0x24>
 800372c:	f7ff ff12 	bl	8003554 <_free_r>
 8003730:	4625      	mov	r5, r4
 8003732:	4628      	mov	r0, r5
 8003734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003738:	f000 f838 	bl	80037ac <_malloc_usable_size_r>
 800373c:	4284      	cmp	r4, r0
 800373e:	4607      	mov	r7, r0
 8003740:	d802      	bhi.n	8003748 <_realloc_r+0x34>
 8003742:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003746:	d812      	bhi.n	800376e <_realloc_r+0x5a>
 8003748:	4621      	mov	r1, r4
 800374a:	4640      	mov	r0, r8
 800374c:	f7ff ff6e 	bl	800362c <_malloc_r>
 8003750:	4605      	mov	r5, r0
 8003752:	2800      	cmp	r0, #0
 8003754:	d0ed      	beq.n	8003732 <_realloc_r+0x1e>
 8003756:	42bc      	cmp	r4, r7
 8003758:	4622      	mov	r2, r4
 800375a:	4631      	mov	r1, r6
 800375c:	bf28      	it	cs
 800375e:	463a      	movcs	r2, r7
 8003760:	f7ff fed0 	bl	8003504 <memcpy>
 8003764:	4631      	mov	r1, r6
 8003766:	4640      	mov	r0, r8
 8003768:	f7ff fef4 	bl	8003554 <_free_r>
 800376c:	e7e1      	b.n	8003732 <_realloc_r+0x1e>
 800376e:	4635      	mov	r5, r6
 8003770:	e7df      	b.n	8003732 <_realloc_r+0x1e>
	...

08003774 <_sbrk_r>:
 8003774:	b538      	push	{r3, r4, r5, lr}
 8003776:	4d06      	ldr	r5, [pc, #24]	; (8003790 <_sbrk_r+0x1c>)
 8003778:	2300      	movs	r3, #0
 800377a:	4604      	mov	r4, r0
 800377c:	4608      	mov	r0, r1
 800377e:	602b      	str	r3, [r5, #0]
 8003780:	f7fd fad2 	bl	8000d28 <_sbrk>
 8003784:	1c43      	adds	r3, r0, #1
 8003786:	d102      	bne.n	800378e <_sbrk_r+0x1a>
 8003788:	682b      	ldr	r3, [r5, #0]
 800378a:	b103      	cbz	r3, 800378e <_sbrk_r+0x1a>
 800378c:	6023      	str	r3, [r4, #0]
 800378e:	bd38      	pop	{r3, r4, r5, pc}
 8003790:	2000031c 	.word	0x2000031c

08003794 <__malloc_lock>:
 8003794:	4801      	ldr	r0, [pc, #4]	; (800379c <__malloc_lock+0x8>)
 8003796:	f000 b811 	b.w	80037bc <__retarget_lock_acquire_recursive>
 800379a:	bf00      	nop
 800379c:	20000320 	.word	0x20000320

080037a0 <__malloc_unlock>:
 80037a0:	4801      	ldr	r0, [pc, #4]	; (80037a8 <__malloc_unlock+0x8>)
 80037a2:	f000 b80c 	b.w	80037be <__retarget_lock_release_recursive>
 80037a6:	bf00      	nop
 80037a8:	20000320 	.word	0x20000320

080037ac <_malloc_usable_size_r>:
 80037ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037b0:	1f18      	subs	r0, r3, #4
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	bfbc      	itt	lt
 80037b6:	580b      	ldrlt	r3, [r1, r0]
 80037b8:	18c0      	addlt	r0, r0, r3
 80037ba:	4770      	bx	lr

080037bc <__retarget_lock_acquire_recursive>:
 80037bc:	4770      	bx	lr

080037be <__retarget_lock_release_recursive>:
 80037be:	4770      	bx	lr

080037c0 <_init>:
 80037c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c2:	bf00      	nop
 80037c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037c6:	bc08      	pop	{r3}
 80037c8:	469e      	mov	lr, r3
 80037ca:	4770      	bx	lr

080037cc <_fini>:
 80037cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ce:	bf00      	nop
 80037d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037d2:	bc08      	pop	{r3}
 80037d4:	469e      	mov	lr, r3
 80037d6:	4770      	bx	lr
